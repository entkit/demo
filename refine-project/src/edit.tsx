// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import { useState } from "react";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as Interfaces from "./typedefs";
import { Cursors } from "./data-provider";
import dayjs from "dayjs";
import CodeEditor from "@uiw/react-textarea-code-editor";
import * as View from "./view";
import * as Action from "./action";
import * as Custom from "./custom";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";

export const CompanyEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoCompanyInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "name",
                    "description",
                    "id",
                    {
                        countries: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        phones: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        emails: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        websites: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        locations: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        logoImage: ["id"],
                    },
                    {
                        coverImage: ["id"],
                    },
                    {
                        galleryImages: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        });

    const [countriesCursors, setCountriesCursors] = useState<Cursors>({});
    const { selectProps: countriesSelectProps } =
        RA.useSelect<Interfaces.DemoCountryInterface>({
            resource: "Country",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: countriesCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [phonesCursors, setPhonesCursors] = useState<Cursors>({});
    const { selectProps: phonesSelectProps } =
        RA.useSelect<Interfaces.DemoPhoneInterface>({
            resource: "Phone",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: phonesCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [emailsCursors, setEmailsCursors] = useState<Cursors>({});
    const { selectProps: emailsSelectProps } =
        RA.useSelect<Interfaces.DemoEmailInterface>({
            resource: "Email",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: emailsCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [websitesCursors, setWebsitesCursors] = useState<Cursors>({});
    const { selectProps: websitesSelectProps } =
        RA.useSelect<Interfaces.DemoWebsiteInterface>({
            resource: "Website",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: websitesCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [locationsCursors, setLocationsCursors] = useState<Cursors>({});
    const { selectProps: locationsSelectProps } =
        RA.useSelect<Interfaces.DemoLocationInterface>({
            resource: "Location",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: locationsCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [logo_imageCursors, setLogoImageCursors] = useState<Cursors>({});
    const { selectProps: logo_imageSelectProps } =
        RA.useSelect<Interfaces.DemoImageInterface>({
            resource: "Image",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: logo_imageCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [cover_imageCursors, setCoverImageCursors] = useState<Cursors>({});
    const { selectProps: cover_imageSelectProps } =
        RA.useSelect<Interfaces.DemoImageInterface>({
            resource: "Image",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: cover_imageCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [gallery_imagesCursors, setGalleryImagesCursors] = useState<Cursors>(
        {},
    );
    const { selectProps: gallery_imagesSelectProps } =
        RA.useSelect<Interfaces.DemoImageInterface>({
            resource: "Image",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: gallery_imagesCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.CompanyShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="name"
                    label="Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoRichTextViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Countries"
                    name={["countryIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...countriesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Phones"
                    name={["phoneIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...phonesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Emails"
                    name={["emailIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...emailsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Websites"
                    name={["websiteIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...websitesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Locations"
                    name={["locationIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...locationsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Logo Image"
                    name="logoImageID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...logo_imageSelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Cover Image"
                    name="coverImageID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...cover_imageSelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Gallery Images"
                    name={["galleryImageIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select
                        {...gallery_imagesSelectProps}
                        mode={"multiple"}
                    />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const CountryEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoCountryInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "name",
                    "code",
                    "id",
                    {
                        companies: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        phones: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        emails: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        websites: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        locations: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        });

    const [companiesCursors, setCompaniesCursors] = useState<Cursors>({});
    const { selectProps: companiesSelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: companiesCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [phonesCursors, setPhonesCursors] = useState<Cursors>({});
    const { selectProps: phonesSelectProps } =
        RA.useSelect<Interfaces.DemoPhoneInterface>({
            resource: "Phone",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: phonesCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [emailsCursors, setEmailsCursors] = useState<Cursors>({});
    const { selectProps: emailsSelectProps } =
        RA.useSelect<Interfaces.DemoEmailInterface>({
            resource: "Email",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: emailsCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [websitesCursors, setWebsitesCursors] = useState<Cursors>({});
    const { selectProps: websitesSelectProps } =
        RA.useSelect<Interfaces.DemoWebsiteInterface>({
            resource: "Website",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: websitesCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [locationsCursors, setLocationsCursors] = useState<Cursors>({});
    const { selectProps: locationsSelectProps } =
        RA.useSelect<Interfaces.DemoLocationInterface>({
            resource: "Location",
            optionLabel: "title",
            optionValue: "id",
            metaData: {
                cursors: locationsCursors,
                fields: ["id", "title"],
            },
            onSearch: (value: string) => [
                {
                    field: "title",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.CountryShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="name"
                    label="Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="code"
                    label="Code"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Companies"
                    name={["companyIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...companiesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Phones"
                    name={["phoneIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...phonesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Emails"
                    name={["emailIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...emailsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Websites"
                    name={["websiteIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...websitesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Locations"
                    name={["locationIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...locationsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const EmailEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoEmailInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "title",
                    "description",
                    "address",
                    "id",
                    {
                        company: ["id"],
                    },
                    {
                        country: ["id"],
                    },
                ],
            },
        });

    const [companyCursors, setCompanyCursors] = useState<Cursors>({});
    const { selectProps: companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [countryCursors, setCountryCursors] = useState<Cursors>({});
    const { selectProps: countrySelectProps } =
        RA.useSelect<Interfaces.DemoCountryInterface>({
            resource: "Country",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: countryCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.EmailShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="title"
                    label="Title"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="address"
                    label="Address"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Company"
                    name="companyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...companySelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Country"
                    name="countryID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...countrySelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const ImageEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoImageInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "title",
                    "originalURL",
                    "id",
                    {
                        galleryCompany: ["id"],
                    },
                    {
                        logoCompany: ["id"],
                    },
                    {
                        coverCompany: ["id"],
                    },
                ],
            },
        });

    const [gallery_companyCursors, setGalleryCompanyCursors] =
        useState<Cursors>({});
    const { selectProps: gallery_companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: gallery_companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [logo_companyCursors, setLogoCompanyCursors] = useState<Cursors>({});
    const { selectProps: logo_companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: logo_companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [cover_companyCursors, setCoverCompanyCursors] = useState<Cursors>(
        {},
    );
    const { selectProps: cover_companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: cover_companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.ImageShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="title"
                    label="Title"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="originalURL"
                    label="Original Url"
                    rules={[{ required: true }]}
                >
                    <View.DemoImageViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Gallery Company"
                    name="galleryCompanyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select
                        {...gallery_companySelectProps}
                        mode={undefined}
                    />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Logo Company"
                    name="logoCompanyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select
                        {...logo_companySelectProps}
                        mode={undefined}
                    />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Cover Company"
                    name="coverCompanyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select
                        {...cover_companySelectProps}
                        mode={undefined}
                    />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const LocationEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoLocationInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "title",
                    "description",
                    "latitude",
                    "longitude",
                    "address",
                    "postcode",
                    "type",
                    "state",
                    "suburb",
                    "streetType",
                    "streetName",
                    "id",
                    {
                        company: ["id"],
                    },
                    {
                        country: ["id"],
                    },
                ],
            },
        });

    const [companyCursors, setCompanyCursors] = useState<Cursors>({});
    const { selectProps: companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [countryCursors, setCountryCursors] = useState<Cursors>({});
    const { selectProps: countrySelectProps } =
        RA.useSelect<Interfaces.DemoCountryInterface>({
            resource: "Country",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: countryCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.LocationShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="title"
                    label="Title"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="latitude"
                    label="Latitude"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="longitude"
                    label="Longitude"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="address"
                    label="Address"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="postcode"
                    label="Postcode"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="type"
                    label="Type"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="state"
                    label="State"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="suburb"
                    label="Suburb"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="streetType"
                    label="Street Type"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="streetName"
                    label="Street Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Company"
                    name="companyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...companySelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Country"
                    name="countryID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...countrySelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const PhoneEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoPhoneInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "title",
                    "description",
                    "number",
                    "type",
                    "id",
                    {
                        company: ["id"],
                    },
                    {
                        country: ["id"],
                    },
                ],
            },
        });

    const [companyCursors, setCompanyCursors] = useState<Cursors>({});
    const { selectProps: companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [countryCursors, setCountryCursors] = useState<Cursors>({});
    const { selectProps: countrySelectProps } =
        RA.useSelect<Interfaces.DemoCountryInterface>({
            resource: "Country",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: countryCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.PhoneShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="title"
                    label="Title"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="number"
                    label="Number"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="type"
                    label="Type"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Company"
                    name="companyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...companySelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Country"
                    name="countryID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...countrySelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const ProductEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoProductInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "name",
                    "description",
                    "image",
                    "url",
                    "lastSell",
                    "createdAt",
                    "status",
                    "buildStatus",
                    "id",
                    {
                        warehouse: ["id"],
                    },
                    {
                        vendor: ["id"],
                    },
                ],
            },
        });

    const [warehouseCursors, setWarehouseCursors] = useState<Cursors>({});
    const { selectProps: warehouseSelectProps } =
        RA.useSelect<Interfaces.DemoWarehouseInterface>({
            resource: "Warehouse",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: warehouseCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [vendorCursors, setVendorCursors] = useState<Cursors>({});
    const { selectProps: vendorSelectProps } =
        RA.useSelect<Interfaces.DemoVendorInterface>({
            resource: "Vendor",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: vendorCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.ProductShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="name"
                    label="Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoRichTextViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="image"
                    label="Image"
                    rules={[{ required: true }]}
                >
                    <View.DemoImageViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="url"
                    label="Url"
                    rules={[{ required: true }]}
                >
                    <View.DemoURLViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="lastSell"
                    label="Last Sell"
                    rules={[{ required: false }]}
                    getValueProps={(value) => ({
                        value: value ? dayjs(value) : "",
                    })}
                >
                    <View.DemoDateViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="createdAt"
                    label="Created At"
                    rules={[{ required: false }]}
                    getValueProps={(value) => ({
                        value: value ? dayjs(value) : "",
                    })}
                >
                    <View.DemoDateViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="status"
                    label="Status"
                    rules={[{ required: true }]}
                >
                    <View.DemoEnumsProcessStatusViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="buildStatus"
                    label="Build Status"
                    rules={[{ required: true }]}
                >
                    <View.DemoEnumsProcessStatusViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Warehouse"
                    name="warehouseID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...warehouseSelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Vendor"
                    name="vendorID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...vendorSelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const VendorEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoVendorInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "name",
                    "schema",
                    "id",
                    {
                        warehouses: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        products: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        });

    const [warehousesCursors, setWarehousesCursors] = useState<Cursors>({});
    const { selectProps: warehousesSelectProps } =
        RA.useSelect<Interfaces.DemoWarehouseInterface>({
            resource: "Warehouse",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: warehousesCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [productsCursors, setProductsCursors] = useState<Cursors>({});
    const { selectProps: productsSelectProps } =
        RA.useSelect<Interfaces.DemoProductInterface>({
            resource: "Product",
            optionLabel: "url",
            optionValue: "id",
            metaData: {
                cursors: productsCursors,
                fields: ["id", "url"],
            },
            onSearch: (value: string) => [
                {
                    field: "url",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.VendorShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="name"
                    label="Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="schema"
                    label="Schema"
                    rules={[{ required: true }]}
                >
                    <View.DemoCodeViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Warehouses"
                    name={["warehouseIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...warehousesSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Products"
                    name={["productIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...productsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const WarehouseEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoWarehouseInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "name",
                    "lastUpdate",
                    "originalData",
                    "enabled",
                    "filters",
                    "id",
                    {
                        products: [
                            {
                                edges: [
                                    {
                                        node: ["id"],
                                    },
                                ],
                            },
                        ],
                    },
                    {
                        vendor: ["id"],
                    },
                ],
            },
        });

    const [productsCursors, setProductsCursors] = useState<Cursors>({});
    const { selectProps: productsSelectProps } =
        RA.useSelect<Interfaces.DemoProductInterface>({
            resource: "Product",
            optionLabel: "url",
            optionValue: "id",
            metaData: {
                cursors: productsCursors,
                fields: ["id", "url"],
            },
            onSearch: (value: string) => [
                {
                    field: "url",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [vendorCursors, setVendorCursors] = useState<Cursors>({});
    const { selectProps: vendorSelectProps } =
        RA.useSelect<Interfaces.DemoVendorInterface>({
            resource: "Vendor",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: vendorCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.WarehouseShowAction
                        recordItemIDs={id ? [id] : []}
                    />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="name"
                    label="Name"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="lastUpdate"
                    label="Last Update"
                    rules={[{ required: false }]}
                    getValueProps={(value) => ({
                        value: value ? dayjs(value) : "",
                    })}
                >
                    <View.DemoDateViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="originalData"
                    label="Original Data"
                    rules={[{ required: false }]}
                >
                    <View.DemoCodeViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="enabled"
                    label="Enabled"
                    rules={[{ required: true }]}
                >
                    <View.DemoBooleanViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="filters"
                    label="Filters"
                    rules={[{ required: false }]}
                >
                    <View.DemoStringListViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Products"
                    name={["productIDs"]}
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...productsSelectProps} mode={"multiple"} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Vendor"
                    name="vendorID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...vendorSelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};

export const WebsiteEdit: React.FC = () => {
    const { formProps, saveButtonProps, queryResult } =
        RA.useForm<Interfaces.DemoWebsiteInterface>({
            redirect: false,
            metaData: {
                fields: [
                    "title",
                    "description",
                    "url",
                    "id",
                    {
                        company: ["id"],
                    },
                    {
                        country: ["id"],
                    },
                ],
            },
        });

    const [companyCursors, setCompanyCursors] = useState<Cursors>({});
    const { selectProps: companySelectProps } =
        RA.useSelect<Interfaces.DemoCompanyInterface>({
            resource: "Company",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: companyCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });
    const [countryCursors, setCountryCursors] = useState<Cursors>({});
    const { selectProps: countrySelectProps } =
        RA.useSelect<Interfaces.DemoCountryInterface>({
            resource: "Country",
            optionLabel: "name",
            optionValue: "id",
            metaData: {
                cursors: countryCursors,
                fields: ["id", "name"],
            },
            onSearch: (value: string) => [
                {
                    field: "name",
                    operator: "contains",
                    value,
                },
            ],
        });

    const id = queryResult?.data?.data.id;
    return (
        <RA.Edit
            saveButtonProps={saveButtonProps}
            headerButtons={() => (
                <>
                    <Action.WebsiteShowAction recordItemIDs={id ? [id] : []} />
                </>
            )}
        >
            <Antd.Form {...formProps} layout="vertical">
                <Antd.Form.Item
                    name="title"
                    label="Title"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="description"
                    label="Description"
                    rules={[{ required: true }]}
                >
                    <View.DemoStringViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    name="url"
                    label="Url"
                    rules={[{ required: true }]}
                >
                    <View.DemoURLViewOnForm />
                </Antd.Form.Item>

                <Antd.Form.Item
                    label="Company"
                    name="companyID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...companySelectProps} mode={undefined} />
                </Antd.Form.Item>
                <Antd.Form.Item
                    label="Country"
                    name="countryID"
                    rules={[{ required: false }]}
                >
                    <Antd.Select {...countrySelectProps} mode={undefined} />
                </Antd.Form.Item>
            </Antd.Form>
        </RA.Edit>
    );
};
