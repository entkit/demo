// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import React, { useState } from "react";
import { useParams } from "react-router-dom";

import * as Type from "./typedefs";
import * as Diagram from "./diagram";
import * as Action from "./action";

import * as RA from "@refinedev/antd";
import { useShow } from "@refinedev/core";
import { usePermissions } from "@refinedev/core";

export type CompanyEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const CompanyEdgesDiagram: React.FC<CompanyEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoCompanyInterface>({
        resource: "company",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "description",
                {
                    operation: "countries",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "name", "code"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "phones",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "number",
                                        "type",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "emails",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "address",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "websites",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "description", "url"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "locations",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "latitude",
                                        "longitude",
                                        "address",
                                        "postcode",
                                        "type",
                                        "state",
                                        "suburb",
                                        "streetType",
                                        "streetName",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    logoImage: ["id", "title", "originalURL"],
                },
                {
                    coverImage: ["id", "title", "originalURL"],
                },
                {
                    operation: "galleryImages",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "originalURL"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        ...(record.countries || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._countries?.totalCount) > Number(record.countries?.length)
            ? {
                  id: "Country_more",
                  label: `More ${
                      Number(record._countries?.totalCount) -
                      Number(record.countries?.length)
                  }`,
              }
            : undefined,
        ...(record.phones || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._phones?.totalCount) > Number(record.phones?.length)
            ? {
                  id: "Phone_more",
                  label: `More ${
                      Number(record._phones?.totalCount) -
                      Number(record.phones?.length)
                  }`,
              }
            : undefined,
        ...(record.emails || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._emails?.totalCount) > Number(record.emails?.length)
            ? {
                  id: "Email_more",
                  label: `More ${
                      Number(record._emails?.totalCount) -
                      Number(record.emails?.length)
                  }`,
              }
            : undefined,
        ...(record.websites || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._websites?.totalCount) > Number(record.websites?.length)
            ? {
                  id: "Website_more",
                  label: `More ${
                      Number(record._websites?.totalCount) -
                      Number(record.websites?.length)
                  }`,
              }
            : undefined,
        ...(record.locations || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._locations?.totalCount) > Number(record.locations?.length)
            ? {
                  id: "Location_more",
                  label: `More ${
                      Number(record._locations?.totalCount) -
                      Number(record.locations?.length)
                  }`,
              }
            : undefined,
        record.logoImage
            ? {
                  id: record.logoImage.id || "n/a",
                  label: record.logoImage.id || "n/a",
              }
            : undefined,
        record.coverImage
            ? {
                  id: record.coverImage.id || "n/a",
                  label: record.coverImage.id || "n/a",
              }
            : undefined,
        ...(record.galleryImages || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._galleryImages?.totalCount) >
        Number(record.galleryImages?.length)
            ? {
                  id: "Image_more",
                  label: `More ${
                      Number(record._galleryImages?.totalCount) -
                      Number(record.galleryImages?.length)
                  }`,
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        ...(record.countries || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Countries",
            };
        }),
        Number(record._countries?.totalCount) > Number(record.countries?.length)
            ? {
                  source: record.id,
                  target: "Country_more",
                  label: "Countries",
              }
            : undefined,
        ...(record.phones || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Phones",
            };
        }),
        Number(record._phones?.totalCount) > Number(record.phones?.length)
            ? {
                  source: record.id,
                  target: "Phone_more",
                  label: "Phones",
              }
            : undefined,
        ...(record.emails || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Emails",
            };
        }),
        Number(record._emails?.totalCount) > Number(record.emails?.length)
            ? {
                  source: record.id,
                  target: "Email_more",
                  label: "Emails",
              }
            : undefined,
        ...(record.websites || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Websites",
            };
        }),
        Number(record._websites?.totalCount) > Number(record.websites?.length)
            ? {
                  source: record.id,
                  target: "Website_more",
                  label: "Websites",
              }
            : undefined,
        ...(record.locations || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Locations",
            };
        }),
        Number(record._locations?.totalCount) > Number(record.locations?.length)
            ? {
                  source: record.id,
                  target: "Location_more",
                  label: "Locations",
              }
            : undefined,
        record.logoImage
            ? {
                  source: record.id,
                  target: record.logoImage?.id || "n/a",
                  label: "Logo Image",
              }
            : undefined,
        record.coverImage
            ? {
                  source: record.id,
                  target: record.coverImage?.id || "n/a",
                  label: "Cover Image",
              }
            : undefined,
        ...(record.galleryImages || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Gallery Images",
            };
        }),
        Number(record._galleryImages?.totalCount) >
        Number(record.galleryImages?.length)
            ? {
                  source: record.id,
                  target: "Image_more",
                  label: "Gallery Images",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.CompanyShowAction recordItemIDs={[record.id]} />

                    <Action.CompanyListAction recordItemIDs={[record.id]} />

                    <Action.CompanyEditAction recordItemIDs={[record.id]} />

                    <Action.CompanyDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type CountryEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const CountryEdgesDiagram: React.FC<CountryEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoCountryInterface>({
        resource: "country",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "code",
                {
                    operation: "companies",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "name", "description"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "phones",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "number",
                                        "type",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "emails",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "address",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "websites",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "description", "url"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "locations",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "latitude",
                                        "longitude",
                                        "address",
                                        "postcode",
                                        "type",
                                        "state",
                                        "suburb",
                                        "streetType",
                                        "streetName",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        ...(record.companies || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._companies?.totalCount) > Number(record.companies?.length)
            ? {
                  id: "Company_more",
                  label: `More ${
                      Number(record._companies?.totalCount) -
                      Number(record.companies?.length)
                  }`,
              }
            : undefined,
        ...(record.phones || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._phones?.totalCount) > Number(record.phones?.length)
            ? {
                  id: "Phone_more",
                  label: `More ${
                      Number(record._phones?.totalCount) -
                      Number(record.phones?.length)
                  }`,
              }
            : undefined,
        ...(record.emails || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._emails?.totalCount) > Number(record.emails?.length)
            ? {
                  id: "Email_more",
                  label: `More ${
                      Number(record._emails?.totalCount) -
                      Number(record.emails?.length)
                  }`,
              }
            : undefined,
        ...(record.websites || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._websites?.totalCount) > Number(record.websites?.length)
            ? {
                  id: "Website_more",
                  label: `More ${
                      Number(record._websites?.totalCount) -
                      Number(record.websites?.length)
                  }`,
              }
            : undefined,
        ...(record.locations || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._locations?.totalCount) > Number(record.locations?.length)
            ? {
                  id: "Location_more",
                  label: `More ${
                      Number(record._locations?.totalCount) -
                      Number(record.locations?.length)
                  }`,
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        ...(record.companies || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Companies",
            };
        }),
        Number(record._companies?.totalCount) > Number(record.companies?.length)
            ? {
                  source: record.id,
                  target: "Company_more",
                  label: "Companies",
              }
            : undefined,
        ...(record.phones || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Phones",
            };
        }),
        Number(record._phones?.totalCount) > Number(record.phones?.length)
            ? {
                  source: record.id,
                  target: "Phone_more",
                  label: "Phones",
              }
            : undefined,
        ...(record.emails || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Emails",
            };
        }),
        Number(record._emails?.totalCount) > Number(record.emails?.length)
            ? {
                  source: record.id,
                  target: "Email_more",
                  label: "Emails",
              }
            : undefined,
        ...(record.websites || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Websites",
            };
        }),
        Number(record._websites?.totalCount) > Number(record.websites?.length)
            ? {
                  source: record.id,
                  target: "Website_more",
                  label: "Websites",
              }
            : undefined,
        ...(record.locations || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Locations",
            };
        }),
        Number(record._locations?.totalCount) > Number(record.locations?.length)
            ? {
                  source: record.id,
                  target: "Location_more",
                  label: "Locations",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.CountryShowAction recordItemIDs={[record.id]} />

                    <Action.CountryListAction recordItemIDs={[record.id]} />

                    <Action.CountryEditAction recordItemIDs={[record.id]} />

                    <Action.CountryDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type EmailEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const EmailEdgesDiagram: React.FC<EmailEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoEmailInterface>({
        resource: "email",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "address",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.company
            ? {
                  id: record.company.id || "n/a",
                  label: record.company.id || "n/a",
              }
            : undefined,
        record.country
            ? {
                  id: record.country.id || "n/a",
                  label: record.country.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.company
            ? {
                  source: record.id,
                  target: record.company?.id || "n/a",
                  label: "Company",
              }
            : undefined,
        record.country
            ? {
                  source: record.id,
                  target: record.country?.id || "n/a",
                  label: "Country",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.EmailShowAction recordItemIDs={[record.id]} />

                    <Action.EmailListAction recordItemIDs={[record.id]} />

                    <Action.EmailEditAction recordItemIDs={[record.id]} />

                    <Action.EmailDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type ImageEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const ImageEdgesDiagram: React.FC<ImageEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoImageInterface>({
        resource: "image",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "originalURL",
                {
                    galleryCompany: ["id", "name", "description"],
                },
                {
                    logoCompany: ["id", "name", "description"],
                },
                {
                    coverCompany: ["id", "name", "description"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.galleryCompany
            ? {
                  id: record.galleryCompany.id || "n/a",
                  label: record.galleryCompany.id || "n/a",
              }
            : undefined,
        record.logoCompany
            ? {
                  id: record.logoCompany.id || "n/a",
                  label: record.logoCompany.id || "n/a",
              }
            : undefined,
        record.coverCompany
            ? {
                  id: record.coverCompany.id || "n/a",
                  label: record.coverCompany.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.galleryCompany
            ? {
                  source: record.id,
                  target: record.galleryCompany?.id || "n/a",
                  label: "Gallery Company",
              }
            : undefined,
        record.logoCompany
            ? {
                  source: record.id,
                  target: record.logoCompany?.id || "n/a",
                  label: "Logo Company",
              }
            : undefined,
        record.coverCompany
            ? {
                  source: record.id,
                  target: record.coverCompany?.id || "n/a",
                  label: "Cover Company",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.ImageShowAction recordItemIDs={[record.id]} />

                    <Action.ImageListAction recordItemIDs={[record.id]} />

                    <Action.ImageEditAction recordItemIDs={[record.id]} />

                    <Action.ImageDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type LocationEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const LocationEdgesDiagram: React.FC<LocationEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoLocationInterface>({
        resource: "location",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "latitude",
                "longitude",
                "address",
                "postcode",
                "type",
                "state",
                "suburb",
                "streetType",
                "streetName",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.company
            ? {
                  id: record.company.id || "n/a",
                  label: record.company.id || "n/a",
              }
            : undefined,
        record.country
            ? {
                  id: record.country.id || "n/a",
                  label: record.country.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.company
            ? {
                  source: record.id,
                  target: record.company?.id || "n/a",
                  label: "Company",
              }
            : undefined,
        record.country
            ? {
                  source: record.id,
                  target: record.country?.id || "n/a",
                  label: "Country",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.LocationShowAction recordItemIDs={[record.id]} />

                    <Action.LocationListAction recordItemIDs={[record.id]} />

                    <Action.LocationEditAction recordItemIDs={[record.id]} />

                    <Action.LocationDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type PhoneEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const PhoneEdgesDiagram: React.FC<PhoneEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoPhoneInterface>({
        resource: "phone",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "number",
                "type",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.company
            ? {
                  id: record.company.id || "n/a",
                  label: record.company.id || "n/a",
              }
            : undefined,
        record.country
            ? {
                  id: record.country.id || "n/a",
                  label: record.country.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.company
            ? {
                  source: record.id,
                  target: record.company?.id || "n/a",
                  label: "Company",
              }
            : undefined,
        record.country
            ? {
                  source: record.id,
                  target: record.country?.id || "n/a",
                  label: "Country",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.PhoneShowAction recordItemIDs={[record.id]} />

                    <Action.PhoneListAction recordItemIDs={[record.id]} />

                    <Action.PhoneEditAction recordItemIDs={[record.id]} />

                    <Action.PhoneDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type ProductEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const ProductEdgesDiagram: React.FC<ProductEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoProductInterface>({
        resource: "product",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "description",
                "image",
                "url",
                "lastSell",
                "createdAt",
                "status",
                "buildStatus",
                {
                    warehouse: [
                        "id",
                        "name",
                        "lastUpdate",
                        "originalData",
                        "enabled",
                        "filters",
                    ],
                },
                {
                    vendor: ["id", "name", "schema"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.warehouse
            ? {
                  id: record.warehouse.id || "n/a",
                  label: record.warehouse.id || "n/a",
              }
            : undefined,
        record.vendor
            ? {
                  id: record.vendor.id || "n/a",
                  label: record.vendor.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.warehouse
            ? {
                  source: record.id,
                  target: record.warehouse?.id || "n/a",
                  label: "Warehouse",
              }
            : undefined,
        record.vendor
            ? {
                  source: record.id,
                  target: record.vendor?.id || "n/a",
                  label: "Vendor",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.ProductShowAction recordItemIDs={[record.id]} />

                    <Action.ProductListAction recordItemIDs={[record.id]} />

                    <Action.ProductEditAction recordItemIDs={[record.id]} />

                    <Action.ProductDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type VendorEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const VendorEdgesDiagram: React.FC<VendorEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoVendorInterface>({
        resource: "vendor",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "schema",
                {
                    operation: "warehouses",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "lastUpdate",
                                        "originalData",
                                        "enabled",
                                        "filters",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "products",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "description",
                                        "image",
                                        "url",
                                        "lastSell",
                                        "createdAt",
                                        "status",
                                        "buildStatus",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        ...(record.warehouses || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._warehouses?.totalCount) >
        Number(record.warehouses?.length)
            ? {
                  id: "Warehouse_more",
                  label: `More ${
                      Number(record._warehouses?.totalCount) -
                      Number(record.warehouses?.length)
                  }`,
              }
            : undefined,
        ...(record.products || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._products?.totalCount) > Number(record.products?.length)
            ? {
                  id: "Product_more",
                  label: `More ${
                      Number(record._products?.totalCount) -
                      Number(record.products?.length)
                  }`,
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        ...(record.warehouses || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Warehouses",
            };
        }),
        Number(record._warehouses?.totalCount) >
        Number(record.warehouses?.length)
            ? {
                  source: record.id,
                  target: "Warehouse_more",
                  label: "Warehouses",
              }
            : undefined,
        ...(record.products || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Products",
            };
        }),
        Number(record._products?.totalCount) > Number(record.products?.length)
            ? {
                  source: record.id,
                  target: "Product_more",
                  label: "Products",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.VendorShowAction recordItemIDs={[record.id]} />

                    <Action.VendorListAction recordItemIDs={[record.id]} />

                    <Action.VendorEditAction recordItemIDs={[record.id]} />

                    <Action.VendorDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type WarehouseEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const WarehouseEdgesDiagram: React.FC<WarehouseEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoWarehouseInterface>({
        resource: "warehouse",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "lastUpdate",
                "originalData",
                "enabled",
                "filters",
                {
                    operation: "products",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "description",
                                        "image",
                                        "url",
                                        "lastSell",
                                        "createdAt",
                                        "status",
                                        "buildStatus",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    vendor: ["id", "name", "schema"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        ...(record.products || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._products?.totalCount) > Number(record.products?.length)
            ? {
                  id: "Product_more",
                  label: `More ${
                      Number(record._products?.totalCount) -
                      Number(record.products?.length)
                  }`,
              }
            : undefined,
        record.vendor
            ? {
                  id: record.vendor.id || "n/a",
                  label: record.vendor.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        ...(record.products || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Products",
            };
        }),
        Number(record._products?.totalCount) > Number(record.products?.length)
            ? {
                  source: record.id,
                  target: "Product_more",
                  label: "Products",
              }
            : undefined,
        record.vendor
            ? {
                  source: record.id,
                  target: record.vendor?.id || "n/a",
                  label: "Vendor",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.WarehouseShowAction recordItemIDs={[record.id]} />

                    <Action.WarehouseListAction recordItemIDs={[record.id]} />

                    <Action.WarehouseEditAction recordItemIDs={[record.id]} />

                    <Action.WarehouseDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type WebsiteEdgesDiagramProps = {
    id?: Type.DemoID;
} & RA.ShowProps;
export const WebsiteEdgesDiagram: React.FC<WebsiteEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.DemoWebsiteInterface>({
        resource: "website",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "url",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.company
            ? {
                  id: record.company.id || "n/a",
                  label: record.company.id || "n/a",
              }
            : undefined,
        record.country
            ? {
                  id: record.country.id || "n/a",
                  label: record.country.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.company
            ? {
                  source: record.id,
                  target: record.company?.id || "n/a",
                  label: "Company",
              }
            : undefined,
        record.country
            ? {
                  source: record.id,
                  target: record.country?.id || "n/a",
                  label: "Country",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.WebsiteShowAction recordItemIDs={[record.id]} />

                    <Action.WebsiteListAction recordItemIDs={[record.id]} />

                    <Action.WebsiteEditAction recordItemIDs={[record.id]} />

                    <Action.WebsiteDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};
