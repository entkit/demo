// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------
import React, { useState } from "react";
import { useShow } from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";

import * as Lists from "./list";
import * as Diagram from "./diagram";
import * as Interfaces from "./typedefs";
import * as View from "./view";
import * as Custom from "./custom";
import * as Action from "./action";

export type CompanyShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const CompanyShow: React.FC<CompanyShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoCompanyInterface>({
        resource: "company",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "description",
                {
                    operation: "countries",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "name", "code"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "phones",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "number",
                                        "type",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "emails",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "address",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "websites",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "description", "url"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "locations",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "latitude",
                                        "longitude",
                                        "address",
                                        "postcode",
                                        "type",
                                        "state",
                                        "suburb",
                                        "streetType",
                                        "streetName",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    logoImage: ["id", "title", "originalURL"],
                },
                {
                    coverImage: ["id", "title", "originalURL"],
                },
                {
                    operation: "galleryImages",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "originalURL"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.CompanyListAction recordItemIDs={[record.id]} />

                    <Action.CompanyEditAction recordItemIDs={[record.id]} />

                    <Action.CompanyDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>

            <Custom.MyCustomTitle value={record?.name} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoRichTextViewOnShow value={record?.description} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Logo Image">
                            <View.ImageBadge {...record?.logoImage} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Cover Image">
                            <View.ImageBadge {...record?.coverImage} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.GlobalOutlined />
                                        Countries
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.CountryList
                                        key={"countries-companiesSlice"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCompaniesWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.PhoneOutlined />
                                        Phones
                                    </span>
                                ),
                                key: "1",
                                children: (
                                    <Lists.PhoneList
                                        key={"phones-companies"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCompanyWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.MailOutlined />
                                        Emails
                                    </span>
                                ),
                                key: "2",
                                children: (
                                    <Lists.EmailList
                                        key={"emails-companies"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCompanyWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.LinkOutlined />
                                        Websites
                                    </span>
                                ),
                                key: "3",
                                children: (
                                    <Lists.WebsiteList
                                        key={"websites-companies"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCompanyWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.PushpinOutlined />
                                        Locations
                                    </span>
                                ),
                                key: "4",
                                children: (
                                    <Lists.LocationList
                                        key={"locations-companies"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCompanyWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.CameraOutlined />
                                        Gallery Images
                                    </span>
                                ),
                                key: "7",
                                children: (
                                    <Lists.ImageList
                                        key={"gallery_images-gallery_companies"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasGalleryCompanyWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const CompanyMainShow: React.FC = () => {
    return <CompanyShow withEdges={true} />;
};

export const CompanyPartialShow: React.FC = () => {
    return <CompanyShow withEdges={false} />;
};

export type CountryShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const CountryShow: React.FC<CountryShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoCountryInterface>({
        resource: "country",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "code",
                {
                    operation: "companies",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "name", "description"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "phones",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "number",
                                        "type",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "emails",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "address",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "websites",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "title", "description", "url"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "locations",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "title",
                                        "description",
                                        "latitude",
                                        "longitude",
                                        "address",
                                        "postcode",
                                        "type",
                                        "state",
                                        "suburb",
                                        "streetType",
                                        "streetName",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.CountryListAction recordItemIDs={[record.id]} />

                    <Action.CountryEditAction recordItemIDs={[record.id]} />

                    <Action.CountryDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.name} />
            <Antd.Typography.Title level={5}>Code</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.code} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions></Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.ShopOutlined />
                                        Companies
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.CompanyList
                                        key={"companies-countriesSlice"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCountriesWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.PhoneOutlined />
                                        Phones
                                    </span>
                                ),
                                key: "1",
                                children: (
                                    <Lists.PhoneList
                                        key={"phones-countries"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCountryWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.MailOutlined />
                                        Emails
                                    </span>
                                ),
                                key: "2",
                                children: (
                                    <Lists.EmailList
                                        key={"emails-countries"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCountryWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.LinkOutlined />
                                        Websites
                                    </span>
                                ),
                                key: "3",
                                children: (
                                    <Lists.WebsiteList
                                        key={"websites-countries"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCountryWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.PushpinOutlined />
                                        Locations
                                    </span>
                                ),
                                key: "4",
                                children: (
                                    <Lists.LocationList
                                        key={"locations-countries"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCountryWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const CountryMainShow: React.FC = () => {
    return <CountryShow withEdges={true} />;
};

export const CountryPartialShow: React.FC = () => {
    return <CountryShow withEdges={false} />;
};

export type EmailShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const EmailShow: React.FC<EmailShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoEmailInterface>({
        resource: "email",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "address",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.EmailListAction recordItemIDs={[record.id]} />

                    <Action.EmailEditAction recordItemIDs={[record.id]} />

                    <Action.EmailDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Title</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.title} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.description} />
            <Antd.Typography.Title level={5}>Address</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.address} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Company">
                            <View.CompanyBadge {...record?.company} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Country">
                            <View.CountryBadge {...record?.country} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const EmailMainShow: React.FC = () => {
    return <EmailShow withEdges={true} />;
};

export const EmailPartialShow: React.FC = () => {
    return <EmailShow withEdges={false} />;
};

export type ImageShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const ImageShow: React.FC<ImageShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoImageInterface>({
        resource: "image",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "originalURL",
                {
                    galleryCompany: ["id", "name", "description"],
                },
                {
                    logoCompany: ["id", "name", "description"],
                },
                {
                    coverCompany: ["id", "name", "description"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.ImageListAction recordItemIDs={[record.id]} />

                    <Action.ImageEditAction recordItemIDs={[record.id]} />

                    <Action.ImageDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Title</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.title} />
            <Antd.Typography.Title level={5}>
                Original Url
            </Antd.Typography.Title>
            <View.DemoImageViewOnShow value={record?.originalURL} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Gallery Company">
                            <View.CompanyBadge {...record?.galleryCompany} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Logo Company">
                            <View.CompanyBadge {...record?.logoCompany} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Cover Company">
                            <View.CompanyBadge {...record?.coverCompany} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const ImageMainShow: React.FC = () => {
    return <ImageShow withEdges={true} />;
};

export const ImagePartialShow: React.FC = () => {
    return <ImageShow withEdges={false} />;
};

export type LocationShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const LocationShow: React.FC<LocationShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoLocationInterface>({
        resource: "location",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "latitude",
                "longitude",
                "address",
                "postcode",
                "type",
                "state",
                "suburb",
                "streetType",
                "streetName",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.LocationListAction recordItemIDs={[record.id]} />

                    <Action.LocationEditAction recordItemIDs={[record.id]} />

                    <Action.LocationDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Title</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.title} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.description} />
            <Antd.Typography.Title level={5}>Latitude</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.latitude} />
            <Antd.Typography.Title level={5}>Longitude</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.longitude} />
            <Antd.Typography.Title level={5}>Address</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.address} />
            <Antd.Typography.Title level={5}>Postcode</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.postcode} />
            <Antd.Typography.Title level={5}>Type</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.type} />
            <Antd.Typography.Title level={5}>State</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.state} />
            <Antd.Typography.Title level={5}>Suburb</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.suburb} />
            <Antd.Typography.Title level={5}>Street Type</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.streetType} />
            <Antd.Typography.Title level={5}>Street Name</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.streetName} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Company">
                            <View.CompanyBadge {...record?.company} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Country">
                            <View.CountryBadge {...record?.country} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const LocationMainShow: React.FC = () => {
    return <LocationShow withEdges={true} />;
};

export const LocationPartialShow: React.FC = () => {
    return <LocationShow withEdges={false} />;
};

export type PhoneShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const PhoneShow: React.FC<PhoneShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoPhoneInterface>({
        resource: "phone",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "number",
                "type",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.PhoneListAction recordItemIDs={[record.id]} />

                    <Action.PhoneEditAction recordItemIDs={[record.id]} />

                    <Action.PhoneDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Title</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.title} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.description} />
            <Antd.Typography.Title level={5}>Number</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.number} />
            <Antd.Typography.Title level={5}>Type</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.type} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Company">
                            <View.CompanyBadge {...record?.company} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Country">
                            <View.CountryBadge {...record?.country} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const PhoneMainShow: React.FC = () => {
    return <PhoneShow withEdges={true} />;
};

export const PhonePartialShow: React.FC = () => {
    return <PhoneShow withEdges={false} />;
};

export type ProductShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const ProductShow: React.FC<ProductShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoProductInterface>({
        resource: "product",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "description",
                "image",
                "url",
                "lastSell",
                "createdAt",
                "status",
                "buildStatus",
                {
                    warehouse: [
                        "id",
                        "name",
                        "lastUpdate",
                        "originalData",
                        "enabled",
                        "filters",
                    ],
                },
                {
                    vendor: ["id", "name", "schema"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.ProductListAction recordItemIDs={[record.id]} />

                    <Action.ProductEditAction recordItemIDs={[record.id]} />

                    <Action.ProductDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.name} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoRichTextViewOnShow value={record?.description} />
            <Antd.Typography.Title level={5}>Image</Antd.Typography.Title>
            <View.DemoImageViewOnShow value={record?.image} />
            <Antd.Typography.Title level={5}>Url</Antd.Typography.Title>
            <View.DemoURLViewOnShow value={record?.url} />
            <Antd.Typography.Title level={5}>Last Sell</Antd.Typography.Title>
            <View.DemoDateViewOnShow value={record?.lastSell} />
            <Antd.Typography.Title level={5}>Created At</Antd.Typography.Title>
            <View.DemoDateViewOnShow value={record?.createdAt} />
            <Antd.Typography.Title level={5}>Status</Antd.Typography.Title>
            <View.DemoEnumsProcessStatusViewOnShow value={record?.status} />
            <Antd.Typography.Title level={5}>
                Build Status
            </Antd.Typography.Title>
            <View.DemoEnumsProcessStatusViewOnShow
                value={record?.buildStatus}
            />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Warehouse">
                            <View.WarehouseBadge {...record?.warehouse} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Vendor">
                            <View.VendorBadge {...record?.vendor} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const ProductMainShow: React.FC = () => {
    return <ProductShow withEdges={true} />;
};

export const ProductPartialShow: React.FC = () => {
    return <ProductShow withEdges={false} />;
};

export type VendorShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const VendorShow: React.FC<VendorShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoVendorInterface>({
        resource: "vendor",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "schema",
                {
                    operation: "warehouses",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "lastUpdate",
                                        "originalData",
                                        "enabled",
                                        "filters",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    operation: "products",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "description",
                                        "image",
                                        "url",
                                        "lastSell",
                                        "createdAt",
                                        "status",
                                        "buildStatus",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.VendorListAction recordItemIDs={[record.id]} />

                    <Action.VendorEditAction recordItemIDs={[record.id]} />

                    <Action.VendorDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.name} />
            <Antd.Typography.Title level={5}>Schema</Antd.Typography.Title>
            <View.DemoCodeViewOnShow value={record?.schema} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions></Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.OrderedListOutlined />
                                        Warehouses
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.WarehouseList
                                        key={"warehouses-vendors"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasVendorWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                            {
                                label: (
                                    <span>
                                        <AntdIcons.FileOutlined />
                                        Products
                                    </span>
                                ),
                                key: "1",
                                children: (
                                    <Lists.ProductList
                                        key={"products-vendors"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasVendorWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const VendorMainShow: React.FC = () => {
    return <VendorShow withEdges={true} />;
};

export const VendorPartialShow: React.FC = () => {
    return <VendorShow withEdges={false} />;
};

export type WarehouseShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const WarehouseShow: React.FC<WarehouseShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoWarehouseInterface>({
        resource: "warehouse",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                "lastUpdate",
                "originalData",
                "enabled",
                "filters",
                {
                    operation: "products",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "name",
                                        "description",
                                        "image",
                                        "url",
                                        "lastSell",
                                        "createdAt",
                                        "status",
                                        "buildStatus",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
                {
                    vendor: ["id", "name", "schema"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.WarehouseListAction recordItemIDs={[record.id]} />

                    <Action.WarehouseEditAction recordItemIDs={[record.id]} />

                    <Action.WarehouseDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.name} />
            <Antd.Typography.Title level={5}>Last Update</Antd.Typography.Title>
            <View.DemoDateViewOnShow value={record?.lastUpdate} />
            <Antd.Typography.Title level={5}>
                Original Data
            </Antd.Typography.Title>
            <View.DemoCodeViewOnShow value={record?.originalData} />
            <Antd.Typography.Title level={5}>Enabled</Antd.Typography.Title>
            <View.DemoBooleanViewOnShow value={record?.enabled} />
            <Antd.Typography.Title level={5}>Filters</Antd.Typography.Title>
            <View.DemoStringListViewOnShow value={record?.filters} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Vendor">
                            <View.VendorBadge {...record?.vendor} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.FileOutlined />
                                        Products
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.ProductList
                                        key={"products-warehouses"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasWarehouseWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const WarehouseMainShow: React.FC = () => {
    return <WarehouseShow withEdges={true} />;
};

export const WarehousePartialShow: React.FC = () => {
    return <WarehouseShow withEdges={false} />;
};

export type WebsiteShowProps = {
    id?: Interfaces.DemoID;
    withEdges?: boolean;
} & RA.ShowProps;
export const WebsiteShow: React.FC<WebsiteShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.DemoWebsiteInterface>({
        resource: "website",
        id,
        metaData: {
            fields: [
                "id",
                "title",
                "description",
                "url",
                {
                    company: ["id", "name", "description"],
                },
                {
                    country: ["id", "name", "code"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.WebsiteListAction recordItemIDs={[record.id]} />

                    <Action.WebsiteEditAction recordItemIDs={[record.id]} />

                    <Action.WebsiteDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.DemoUUIDViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Title</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.title} />
            <Antd.Typography.Title level={5}>Description</Antd.Typography.Title>
            <View.DemoStringViewOnShow value={record?.description} />
            <Antd.Typography.Title level={5}>Url</Antd.Typography.Title>
            <View.DemoURLViewOnShow value={record?.url} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Company">
                            <View.CompanyBadge {...record?.company} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Country">
                            <View.CountryBadge {...record?.country} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const WebsiteMainShow: React.FC = () => {
    return <WebsiteShow withEdges={true} />;
};

export const WebsitePartialShow: React.FC = () => {
    return <WebsiteShow withEdges={false} />;
};
