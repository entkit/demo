directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Company implements Node {
  id: ID!
  name: String!
  description: String!
  countries(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Countries returned from the connection."""
    orderBy: CountryOrder

    """Filtering options for Countries returned from the connection."""
    where: CountryWhereInput
  ): CountryConnection!
  phones(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Phones returned from the connection."""
    orderBy: PhoneOrder

    """Filtering options for Phones returned from the connection."""
    where: PhoneWhereInput
  ): PhoneConnection!
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Emails returned from the connection."""
    orderBy: EmailOrder

    """Filtering options for Emails returned from the connection."""
    where: EmailWhereInput
  ): EmailConnection!
  websites(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Websites returned from the connection."""
    orderBy: WebsiteOrder

    """Filtering options for Websites returned from the connection."""
    where: WebsiteWhereInput
  ): WebsiteConnection!
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection!
  logoImage: Image
  coverImage: Image
  galleryImages(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Images returned from the connection."""
    orderBy: ImageOrder

    """Filtering options for Images returned from the connection."""
    where: ImageWhereInput
  ): ImageConnection!
}
"""A connection to a list of items."""
type CompanyConnection {
  """A list of edges."""
  edges: [CompanyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Company connections"""
input CompanyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Companies."""
  field: CompanyOrderField!
}
"""Properties by which Company connections can be ordered."""
enum CompanyOrderField {
  NAME
  DESCRIPTION
}
"""
CompanyWhereInput is used for filtering Company objects.
Input was generated by ent.
"""
input CompanyWhereInput {
  not: CompanyWhereInput
  and: [CompanyWhereInput!]
  or: [CompanyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """countries edge predicates"""
  hasCountries: Boolean
  hasCountriesWith: [CountryWhereInput!]
  """phones edge predicates"""
  hasPhones: Boolean
  hasPhonesWith: [PhoneWhereInput!]
  """emails edge predicates"""
  hasEmails: Boolean
  hasEmailsWith: [EmailWhereInput!]
  """websites edge predicates"""
  hasWebsites: Boolean
  hasWebsitesWith: [WebsiteWhereInput!]
  """locations edge predicates"""
  hasLocations: Boolean
  hasLocationsWith: [LocationWhereInput!]
  """logo_image edge predicates"""
  hasLogoImage: Boolean
  hasLogoImageWith: [ImageWhereInput!]
  """cover_image edge predicates"""
  hasCoverImage: Boolean
  hasCoverImageWith: [ImageWhereInput!]
  """gallery_images edge predicates"""
  hasGalleryImages: Boolean
  hasGalleryImagesWith: [ImageWhereInput!]
}
type Country implements Node {
  id: ID!
  name: String!
  code: String!
  companies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Companies returned from the connection."""
    orderBy: CompanyOrder

    """Filtering options for Companies returned from the connection."""
    where: CompanyWhereInput
  ): CompanyConnection!
  phones(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Phones returned from the connection."""
    orderBy: PhoneOrder

    """Filtering options for Phones returned from the connection."""
    where: PhoneWhereInput
  ): PhoneConnection!
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Emails returned from the connection."""
    orderBy: EmailOrder

    """Filtering options for Emails returned from the connection."""
    where: EmailWhereInput
  ): EmailConnection!
  websites(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Websites returned from the connection."""
    orderBy: WebsiteOrder

    """Filtering options for Websites returned from the connection."""
    where: WebsiteWhereInput
  ): WebsiteConnection!
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection!
}
"""A connection to a list of items."""
type CountryConnection {
  """A list of edges."""
  edges: [CountryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Country connections"""
input CountryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Countries."""
  field: CountryOrderField!
}
"""Properties by which Country connections can be ordered."""
enum CountryOrderField {
  NAME
  CODE
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """companies edge predicates"""
  hasCompanies: Boolean
  hasCompaniesWith: [CompanyWhereInput!]
  """phones edge predicates"""
  hasPhones: Boolean
  hasPhonesWith: [PhoneWhereInput!]
  """emails edge predicates"""
  hasEmails: Boolean
  hasEmailsWith: [EmailWhereInput!]
  """websites edge predicates"""
  hasWebsites: Boolean
  hasWebsitesWith: [WebsiteWhereInput!]
  """locations edge predicates"""
  hasLocations: Boolean
  hasLocationsWith: [LocationWhereInput!]
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  name: String!
  description: String!
  countryIDs: [ID!]
  phoneIDs: [ID!]
  emailIDs: [ID!]
  websiteIDs: [ID!]
  locationIDs: [ID!]
  logoImageID: ID
  coverImageID: ID
  galleryImageIDs: [ID!]
}
"""
CreateCountryInput is used for create Country object.
Input was generated by ent.
"""
input CreateCountryInput {
  name: String!
  code: String!
  companyIDs: [ID!]
  phoneIDs: [ID!]
  emailIDs: [ID!]
  websiteIDs: [ID!]
  locationIDs: [ID!]
}
"""
CreateEmailInput is used for create Email object.
Input was generated by ent.
"""
input CreateEmailInput {
  title: String!
  description: String!
  address: String!
  companyID: ID
  countryID: ID
}
"""
CreateImageInput is used for create Image object.
Input was generated by ent.
"""
input CreateImageInput {
  title: String!
  originalURL: String!
  galleryCompanyID: ID
  logoCompanyID: ID
  coverCompanyID: ID
}
"""
CreateLocationInput is used for create Location object.
Input was generated by ent.
"""
input CreateLocationInput {
  title: String!
  description: String!
  latitude: Float!
  longitude: Float!
  address: String!
  postcode: String!
  type: String!
  state: String!
  suburb: String!
  streetType: String!
  streetName: String!
  companyID: ID
  countryID: ID
}
"""
CreatePhoneInput is used for create Phone object.
Input was generated by ent.
"""
input CreatePhoneInput {
  title: String!
  description: String!
  number: String!
  type: String!
  companyID: ID
  countryID: ID
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  name: String!
  description: String!
  image: String!
  url: String!
  status: ProductProcessStatus
  buildStatus: ProductProcessStatus
  warehouseID: ID
  vendorID: ID
}
"""
CreateVendorInput is used for create Vendor object.
Input was generated by ent.
"""
input CreateVendorInput {
  name: String!
  schema: String!
  warehouseIDs: [ID!]
  productIDs: [ID!]
}
"""
CreateWarehouseInput is used for create Warehouse object.
Input was generated by ent.
"""
input CreateWarehouseInput {
  name: String!
  originalData: String
  enabled: Boolean
  filters: [String!]
  productIDs: [ID!]
  vendorID: ID
}
"""
CreateWebsiteInput is used for create Website object.
Input was generated by ent.
"""
input CreateWebsiteInput {
  title: String!
  description: String!
  url: String!
  companyID: ID
  countryID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Email implements Node {
  id: ID!
  title: String!
  description: String!
  address: String!
  company: Company
  country: Country
}
"""A connection to a list of items."""
type EmailConnection {
  """A list of edges."""
  edges: [EmailEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EmailEdge {
  """The item at the end of the edge."""
  node: Email
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Email connections"""
input EmailOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Emails."""
  field: EmailOrderField!
}
"""Properties by which Email connections can be ordered."""
enum EmailOrderField {
  TITLE
  DESCRIPTION
  ADDRESS
}
"""
EmailWhereInput is used for filtering Email objects.
Input was generated by ent.
"""
input EmailWhereInput {
  not: EmailWhereInput
  and: [EmailWhereInput!]
  or: [EmailWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """company edge predicates"""
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """country edge predicates"""
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
type Image implements Node {
  id: ID!
  title: String!
  originalURL: String!
  galleryCompany: Company
  logoCompany: Company
  coverCompany: Company
}
"""A connection to a list of items."""
type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Image connections"""
input ImageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Images."""
  field: ImageOrderField!
}
"""Properties by which Image connections can be ordered."""
enum ImageOrderField {
  TITLE
  ORIGINAL_URL
}
"""
ImageWhereInput is used for filtering Image objects.
Input was generated by ent.
"""
input ImageWhereInput {
  not: ImageWhereInput
  and: [ImageWhereInput!]
  or: [ImageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """original_url field predicates"""
  originalURL: String
  originalURLNEQ: String
  originalURLIn: [String!]
  originalURLNotIn: [String!]
  originalURLGT: String
  originalURLGTE: String
  originalURLLT: String
  originalURLLTE: String
  originalURLContains: String
  originalURLHasPrefix: String
  originalURLHasSuffix: String
  originalURLEqualFold: String
  originalURLContainsFold: String
  """gallery_company edge predicates"""
  hasGalleryCompany: Boolean
  hasGalleryCompanyWith: [CompanyWhereInput!]
  """logo_company edge predicates"""
  hasLogoCompany: Boolean
  hasLogoCompanyWith: [CompanyWhereInput!]
  """cover_company edge predicates"""
  hasCoverCompany: Boolean
  hasCoverCompanyWith: [CompanyWhereInput!]
}
type Location implements Node {
  id: ID!
  title: String!
  description: String!
  latitude: Float!
  longitude: Float!
  address: String!
  postcode: String!
  type: String!
  state: String!
  suburb: String!
  streetType: String!
  streetName: String!
  company: Company
  country: Country
}
"""A connection to a list of items."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Location connections"""
input LocationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Locations."""
  field: LocationOrderField!
}
"""Properties by which Location connections can be ordered."""
enum LocationOrderField {
  TITLE
  DESCRIPTION
  LATITUDE
  LONGITUDE
  ADDRESS
  POSTCODE
  TYPE
  STATE
  SUBURB
  STREET_TYPE
  STREET_NAME
}
"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput {
  not: LocationWhereInput
  and: [LocationWhereInput!]
  or: [LocationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """latitude field predicates"""
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  """longitude field predicates"""
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  """address field predicates"""
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """postcode field predicates"""
  postcode: String
  postcodeNEQ: String
  postcodeIn: [String!]
  postcodeNotIn: [String!]
  postcodeGT: String
  postcodeGTE: String
  postcodeLT: String
  postcodeLTE: String
  postcodeContains: String
  postcodeHasPrefix: String
  postcodeHasSuffix: String
  postcodeEqualFold: String
  postcodeContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateEqualFold: String
  stateContainsFold: String
  """suburb field predicates"""
  suburb: String
  suburbNEQ: String
  suburbIn: [String!]
  suburbNotIn: [String!]
  suburbGT: String
  suburbGTE: String
  suburbLT: String
  suburbLTE: String
  suburbContains: String
  suburbHasPrefix: String
  suburbHasSuffix: String
  suburbEqualFold: String
  suburbContainsFold: String
  """street_type field predicates"""
  streetType: String
  streetTypeNEQ: String
  streetTypeIn: [String!]
  streetTypeNotIn: [String!]
  streetTypeGT: String
  streetTypeGTE: String
  streetTypeLT: String
  streetTypeLTE: String
  streetTypeContains: String
  streetTypeHasPrefix: String
  streetTypeHasSuffix: String
  streetTypeEqualFold: String
  streetTypeContainsFold: String
  """street_name field predicates"""
  streetName: String
  streetNameNEQ: String
  streetNameIn: [String!]
  streetNameNotIn: [String!]
  streetNameGT: String
  streetNameGTE: String
  streetNameLT: String
  streetNameLTE: String
  streetNameContains: String
  streetNameHasPrefix: String
  streetNameHasSuffix: String
  streetNameEqualFold: String
  streetNameContainsFold: String
  """company edge predicates"""
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """country edge predicates"""
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/entkit/entkit-demo/ent-project/core/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Phone implements Node {
  id: ID!
  title: String!
  description: String!
  number: String!
  type: String!
  company: Company
  country: Country
}
"""A connection to a list of items."""
type PhoneConnection {
  """A list of edges."""
  edges: [PhoneEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PhoneEdge {
  """The item at the end of the edge."""
  node: Phone
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Phone connections"""
input PhoneOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Phones."""
  field: PhoneOrderField!
}
"""Properties by which Phone connections can be ordered."""
enum PhoneOrderField {
  TITLE
  DESCRIPTION
  NUMBER
  TYPE
}
"""
PhoneWhereInput is used for filtering Phone objects.
Input was generated by ent.
"""
input PhoneWhereInput {
  not: PhoneWhereInput
  and: [PhoneWhereInput!]
  or: [PhoneWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """number field predicates"""
  number: String
  numberNEQ: String
  numberIn: [String!]
  numberNotIn: [String!]
  numberGT: String
  numberGTE: String
  numberLT: String
  numberLTE: String
  numberContains: String
  numberHasPrefix: String
  numberHasSuffix: String
  numberEqualFold: String
  numberContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """company edge predicates"""
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """country edge predicates"""
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
type Product implements Node {
  id: ID!
  name: String!
  description: String!
  image: String!
  url: String!
  lastSell: Time
  createdAt: Time
  status: ProductProcessStatus!
  buildStatus: ProductProcessStatus!
  warehouse: Warehouse
  vendor: Vendor
}
"""A connection to a list of items."""
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Product connections"""
input ProductOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Products."""
  field: ProductOrderField!
}
"""Properties by which Product connections can be ordered."""
enum ProductOrderField {
  TITLE
  DESCRIPTION
  IMAGE
  URL
  LAST_SELL
  CREATED_AT
  STATUS
  BUILD_STATUS
}
"""ProductProcessStatus is enum for the field status"""
enum ProductProcessStatus @goModel(model: "github.com/entkit/entkit-demo/ent-project/core/schema/enums.ProcessStatus") {
  none
  done
  enqueued
  in_progress
  failed
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """last_sell field predicates"""
  lastSell: Time
  lastSellNEQ: Time
  lastSellIn: [Time!]
  lastSellNotIn: [Time!]
  lastSellGT: Time
  lastSellGTE: Time
  lastSellLT: Time
  lastSellLTE: Time
  lastSellIsNil: Boolean
  lastSellNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """status field predicates"""
  status: ProductProcessStatus
  statusNEQ: ProductProcessStatus
  statusIn: [ProductProcessStatus!]
  statusNotIn: [ProductProcessStatus!]
  """build_status field predicates"""
  buildStatus: ProductProcessStatus
  buildStatusNEQ: ProductProcessStatus
  buildStatusIn: [ProductProcessStatus!]
  buildStatusNotIn: [ProductProcessStatus!]
  """warehouse edge predicates"""
  hasWarehouse: Boolean
  hasWarehouseWith: [WarehouseWhereInput!]
  """vendor edge predicates"""
  hasVendor: Boolean
  hasVendorWith: [VendorWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  companies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Companies returned from the connection."""
    orderBy: CompanyOrder

    """Filtering options for Companies returned from the connection."""
    where: CompanyWhereInput

    """Search query"""
    q: String
  ): CompanyConnection!
  countries(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Countries returned from the connection."""
    orderBy: CountryOrder

    """Filtering options for Countries returned from the connection."""
    where: CountryWhereInput

    """Search query"""
    q: String
  ): CountryConnection!
  emails(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Emails returned from the connection."""
    orderBy: EmailOrder

    """Filtering options for Emails returned from the connection."""
    where: EmailWhereInput

    """Search query"""
    q: String
  ): EmailConnection!
  images(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Images returned from the connection."""
    orderBy: ImageOrder

    """Filtering options for Images returned from the connection."""
    where: ImageWhereInput

    """Search query"""
    q: String
  ): ImageConnection!
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Locations returned from the connection."""
    orderBy: LocationOrder

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput

    """Search query"""
    q: String
  ): LocationConnection!
  phones(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Phones returned from the connection."""
    orderBy: PhoneOrder

    """Filtering options for Phones returned from the connection."""
    where: PhoneWhereInput

    """Search query"""
    q: String
  ): PhoneConnection!
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Products returned from the connection."""
    orderBy: ProductOrder

    """Filtering options for Products returned from the connection."""
    where: ProductWhereInput

    """Search query"""
    q: String
  ): ProductConnection!
  vendors(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Vendors returned from the connection."""
    orderBy: VendorOrder

    """Filtering options for Vendors returned from the connection."""
    where: VendorWhereInput

    """Search query"""
    q: String
  ): VendorConnection!
  warehouses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Warehouses returned from the connection."""
    orderBy: WarehouseOrder

    """Filtering options for Warehouses returned from the connection."""
    where: WarehouseWhereInput

    """Search query"""
    q: String
  ): WarehouseConnection!
  websites(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Websites returned from the connection."""
    orderBy: WebsiteOrder

    """Filtering options for Websites returned from the connection."""
    where: WebsiteWhereInput

    """Search query"""
    q: String
  ): WebsiteConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  name: String
  description: String
  addCountryIDs: [ID!]
  removeCountryIDs: [ID!]
  clearCountries: Boolean
  addPhoneIDs: [ID!]
  removePhoneIDs: [ID!]
  clearPhones: Boolean
  addEmailIDs: [ID!]
  removeEmailIDs: [ID!]
  clearEmails: Boolean
  addWebsiteIDs: [ID!]
  removeWebsiteIDs: [ID!]
  clearWebsites: Boolean
  addLocationIDs: [ID!]
  removeLocationIDs: [ID!]
  clearLocations: Boolean
  logoImageID: ID
  clearLogoImage: Boolean
  coverImageID: ID
  clearCoverImage: Boolean
  addGalleryImageIDs: [ID!]
  removeGalleryImageIDs: [ID!]
  clearGalleryImages: Boolean
}
"""
UpdateCountryInput is used for update Country object.
Input was generated by ent.
"""
input UpdateCountryInput {
  name: String
  code: String
  addCompanyIDs: [ID!]
  removeCompanyIDs: [ID!]
  clearCompanies: Boolean
  addPhoneIDs: [ID!]
  removePhoneIDs: [ID!]
  clearPhones: Boolean
  addEmailIDs: [ID!]
  removeEmailIDs: [ID!]
  clearEmails: Boolean
  addWebsiteIDs: [ID!]
  removeWebsiteIDs: [ID!]
  clearWebsites: Boolean
  addLocationIDs: [ID!]
  removeLocationIDs: [ID!]
  clearLocations: Boolean
}
"""
UpdateEmailInput is used for update Email object.
Input was generated by ent.
"""
input UpdateEmailInput {
  title: String
  description: String
  address: String
  companyID: ID
  clearCompany: Boolean
  countryID: ID
  clearCountry: Boolean
}
"""
UpdateImageInput is used for update Image object.
Input was generated by ent.
"""
input UpdateImageInput {
  title: String
  originalURL: String
  galleryCompanyID: ID
  clearGalleryCompany: Boolean
  logoCompanyID: ID
  clearLogoCompany: Boolean
  coverCompanyID: ID
  clearCoverCompany: Boolean
}
"""
UpdateLocationInput is used for update Location object.
Input was generated by ent.
"""
input UpdateLocationInput {
  title: String
  description: String
  latitude: Float
  longitude: Float
  address: String
  postcode: String
  type: String
  state: String
  suburb: String
  streetType: String
  streetName: String
  companyID: ID
  clearCompany: Boolean
  countryID: ID
  clearCountry: Boolean
}
"""
UpdatePhoneInput is used for update Phone object.
Input was generated by ent.
"""
input UpdatePhoneInput {
  title: String
  description: String
  number: String
  type: String
  companyID: ID
  clearCompany: Boolean
  countryID: ID
  clearCountry: Boolean
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  name: String
  description: String
  image: String
  url: String
  lastSell: Time
  clearLastSell: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  status: ProductProcessStatus
  buildStatus: ProductProcessStatus
  warehouseID: ID
  clearWarehouse: Boolean
  vendorID: ID
  clearVendor: Boolean
}
"""
UpdateVendorInput is used for update Vendor object.
Input was generated by ent.
"""
input UpdateVendorInput {
  name: String
  schema: String
  addWarehouseIDs: [ID!]
  removeWarehouseIDs: [ID!]
  clearWarehouses: Boolean
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
}
"""
UpdateWarehouseInput is used for update Warehouse object.
Input was generated by ent.
"""
input UpdateWarehouseInput {
  name: String
  lastUpdate: Time
  clearLastUpdate: Boolean
  originalData: String
  clearOriginalData: Boolean
  enabled: Boolean
  filters: [String!]
  appendFilters: [String!]
  clearFilters: Boolean
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
  vendorID: ID
  clearVendor: Boolean
}
"""
UpdateWebsiteInput is used for update Website object.
Input was generated by ent.
"""
input UpdateWebsiteInput {
  title: String
  description: String
  url: String
  companyID: ID
  clearCompany: Boolean
  countryID: ID
  clearCountry: Boolean
}
type Vendor implements Node {
  id: ID!
  name: String!
  schema: String!
  warehouses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Warehouses returned from the connection."""
    orderBy: WarehouseOrder

    """Filtering options for Warehouses returned from the connection."""
    where: WarehouseWhereInput
  ): WarehouseConnection!
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Products returned from the connection."""
    orderBy: ProductOrder

    """Filtering options for Products returned from the connection."""
    where: ProductWhereInput
  ): ProductConnection!
}
"""A connection to a list of items."""
type VendorConnection {
  """A list of edges."""
  edges: [VendorEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type VendorEdge {
  """The item at the end of the edge."""
  node: Vendor
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Vendor connections"""
input VendorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Vendors."""
  field: VendorOrderField!
}
"""Properties by which Vendor connections can be ordered."""
enum VendorOrderField {
  NAME
  SCHEMA
}
"""
VendorWhereInput is used for filtering Vendor objects.
Input was generated by ent.
"""
input VendorWhereInput {
  not: VendorWhereInput
  and: [VendorWhereInput!]
  or: [VendorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """schema field predicates"""
  schema: String
  schemaNEQ: String
  schemaIn: [String!]
  schemaNotIn: [String!]
  schemaGT: String
  schemaGTE: String
  schemaLT: String
  schemaLTE: String
  schemaContains: String
  schemaHasPrefix: String
  schemaHasSuffix: String
  schemaEqualFold: String
  schemaContainsFold: String
  """warehouses edge predicates"""
  hasWarehouses: Boolean
  hasWarehousesWith: [WarehouseWhereInput!]
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
}
type Warehouse implements Node {
  id: ID!
  name: String!
  lastUpdate: Time
  originalData: String
  enabled: Boolean!
  filters: [String!]
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Products returned from the connection."""
    orderBy: ProductOrder

    """Filtering options for Products returned from the connection."""
    where: ProductWhereInput
  ): ProductConnection!
  vendor: Vendor
}
"""A connection to a list of items."""
type WarehouseConnection {
  """A list of edges."""
  edges: [WarehouseEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type WarehouseEdge {
  """The item at the end of the edge."""
  node: Warehouse
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Warehouse connections"""
input WarehouseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Warehouses."""
  field: WarehouseOrderField!
}
"""Properties by which Warehouse connections can be ordered."""
enum WarehouseOrderField {
  NAME
  LAST_UPDATE
  ENABLED
}
"""
WarehouseWhereInput is used for filtering Warehouse objects.
Input was generated by ent.
"""
input WarehouseWhereInput {
  not: WarehouseWhereInput
  and: [WarehouseWhereInput!]
  or: [WarehouseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """last_update field predicates"""
  lastUpdate: Time
  lastUpdateNEQ: Time
  lastUpdateIn: [Time!]
  lastUpdateNotIn: [Time!]
  lastUpdateGT: Time
  lastUpdateGTE: Time
  lastUpdateLT: Time
  lastUpdateLTE: Time
  lastUpdateIsNil: Boolean
  lastUpdateNotNil: Boolean
  """original_data field predicates"""
  originalData: String
  originalDataNEQ: String
  originalDataIn: [String!]
  originalDataNotIn: [String!]
  originalDataGT: String
  originalDataGTE: String
  originalDataLT: String
  originalDataLTE: String
  originalDataContains: String
  originalDataHasPrefix: String
  originalDataHasSuffix: String
  originalDataIsNil: Boolean
  originalDataNotNil: Boolean
  originalDataEqualFold: String
  originalDataContainsFold: String
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """products edge predicates"""
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
  """vendor edge predicates"""
  hasVendor: Boolean
  hasVendorWith: [VendorWhereInput!]
}
type Website implements Node {
  id: ID!
  title: String!
  description: String!
  url: String!
  company: Company
  country: Country
}
"""A connection to a list of items."""
type WebsiteConnection {
  """A list of edges."""
  edges: [WebsiteEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type WebsiteEdge {
  """The item at the end of the edge."""
  node: Website
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Website connections"""
input WebsiteOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Websites."""
  field: WebsiteOrderField!
}
"""Properties by which Website connections can be ordered."""
enum WebsiteOrderField {
  TITLE
  DESCRIPTION
  URL
}
"""
WebsiteWhereInput is used for filtering Website objects.
Input was generated by ent.
"""
input WebsiteWhereInput {
  not: WebsiteWhereInput
  and: [WebsiteWhereInput!]
  or: [WebsiteWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """company edge predicates"""
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """country edge predicates"""
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
