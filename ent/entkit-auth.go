// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/entkit/entkit/v2"
	"github.com/gin-gonic/gin"
)

// _entkitDefaultValue to provide default values from entc definition and also get ability to provide from caller
func _entkitDefaultValue(value string, defaultValue string) string {
	if value == "" {
		return defaultValue
	}
	return value
}

func DemoAuthMiddleware(
	next http.Handler,
	keycloakHost string,
	keycloakRealm string,
	keycloakBackendClientID string,
	keycloakBackendClientSecret string,
) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		kc := entkit.NewBackendKeycloak(
			_entkitDefaultValue(keycloakHost, "http://localhost:8080"),
			_entkitDefaultValue(keycloakRealm, "entkit-demo-3"),
			_entkitDefaultValue(keycloakBackendClientID, "backend"),
			_entkitDefaultValue(keycloakBackendClientSecret, "test-secret"),
		)
		r, err = kc.MiddlewareReqHandlerFunc(w, r)
		if err == nil {
			next.ServeHTTP(w, r)
		}
	})
}

func DemoAuthGinMiddleware(
	keycloakHost string,
	keycloakRealm string,
	keycloakBackendClientID string,
	keycloakBackendClientSecret string,
) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "POST, GET")
		c.Header("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		kc := entkit.NewBackendKeycloak(
			"http://localhost:8080",
			"entkit-demo-3",
			"backend",
			"test-secret",
		)
		c.Request, err = kc.MiddlewareReqHandlerFunc(c.Writer, c.Request)
		if err == nil {
			c.Next()
		} else {
			c.Abort()
		}
	}
}

type DemoResource int

const (
	DemoCompanyResource DemoResource = iota
	DemoCountryResource
	DemoEmailResource
	DemoImageResource
	DemoLocationResource
	DemoPhoneResource
	DemoProductResource
	DemoVendorResource
	DemoWarehouseResource
	DemoWebsiteResource
)

func (e DemoResource) String() string {
	switch e {
	case DemoCompanyResource:
		return "DemoCompany"
	case DemoCountryResource:
		return "DemoCountry"
	case DemoEmailResource:
		return "DemoEmail"
	case DemoImageResource:
		return "DemoImage"
	case DemoLocationResource:
		return "DemoLocation"
	case DemoPhoneResource:
		return "DemoPhone"
	case DemoProductResource:
		return "DemoProduct"
	case DemoVendorResource:
		return "DemoVendor"
	case DemoWarehouseResource:
		return "DemoWarehouse"
	case DemoWebsiteResource:
		return "DemoWebsite"
	default:
		return "unknown"
	}
}

type DemoScope int

const (
	DemoReadScope DemoScope = iota
	DemoCreateScope
	DemoUpdateScope
	DemoDeleteScope
	DemoMyCustomActionButtonScope
)

func (e DemoScope) String() string {
	switch e {
	case DemoReadScope:
		return "DemoRead"
	case DemoCreateScope:
		return "DemoCreate"
	case DemoUpdateScope:
		return "DemoUpdate"
	case DemoDeleteScope:
		return "DemoDelete"
	case DemoMyCustomActionButtonScope:
		return "DemoMyCustomActionButton"
	default:
		return "unknown"
	}
}

func DemoAuthorizeByResource(ctx context.Context, resource DemoResource, scope DemoScope) error {
	authContext, err := DemoAuthContextFromRequestContext(ctx)
	if err != nil {
		return err
	}
	auth := false
	for _, p := range authContext.Permissions {
		if p.Resource == resource.String() {
			for _, _scope := range p.Scopes {
				if _scope == scope.String() {
					auth = true
					break
				}
			}
		}
	}
	if !auth {
		return errors.New("access restricted for " + resource.String() + " " + scope.String())
	}
	return nil
}

func DemoEnforceCompanyRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCompanyResource, DemoReadScope)
}

func DemoEnforceCompanyCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCompanyResource, DemoCreateScope)
}

func DemoEnforceCompanyUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCompanyResource, DemoUpdateScope)
}

func DemoEnforceCompanyDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCompanyResource, DemoDeleteScope)
}

func DemoEnforceCountryRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCountryResource, DemoReadScope)
}

func DemoEnforceCountryCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCountryResource, DemoCreateScope)
}

func DemoEnforceCountryUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCountryResource, DemoUpdateScope)
}

func DemoEnforceCountryDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoCountryResource, DemoDeleteScope)
}

func DemoEnforceEmailRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoEmailResource, DemoReadScope)
}

func DemoEnforceEmailCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoEmailResource, DemoCreateScope)
}

func DemoEnforceEmailUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoEmailResource, DemoUpdateScope)
}

func DemoEnforceEmailDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoEmailResource, DemoDeleteScope)
}

func DemoEnforceImageRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoImageResource, DemoReadScope)
}

func DemoEnforceImageCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoImageResource, DemoCreateScope)
}

func DemoEnforceImageUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoImageResource, DemoUpdateScope)
}

func DemoEnforceImageDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoImageResource, DemoDeleteScope)
}

func DemoEnforceLocationRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoLocationResource, DemoReadScope)
}

func DemoEnforceLocationCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoLocationResource, DemoCreateScope)
}

func DemoEnforceLocationUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoLocationResource, DemoUpdateScope)
}

func DemoEnforceLocationDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoLocationResource, DemoDeleteScope)
}

func DemoEnforcePhoneRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoPhoneResource, DemoReadScope)
}

func DemoEnforcePhoneCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoPhoneResource, DemoCreateScope)
}

func DemoEnforcePhoneUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoPhoneResource, DemoUpdateScope)
}

func DemoEnforcePhoneDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoPhoneResource, DemoDeleteScope)
}

func DemoEnforceProductRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoProductResource, DemoReadScope)
}

func DemoEnforceProductCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoProductResource, DemoCreateScope)
}

func DemoEnforceProductUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoProductResource, DemoUpdateScope)
}

func DemoEnforceProductDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoProductResource, DemoDeleteScope)
}

func DemoEnforceProductMyCustomActionButton(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoProductResource, DemoMyCustomActionButtonScope)
}

func DemoEnforceVendorRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoVendorResource, DemoReadScope)
}

func DemoEnforceVendorCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoVendorResource, DemoCreateScope)
}

func DemoEnforceVendorUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoVendorResource, DemoUpdateScope)
}

func DemoEnforceVendorDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoVendorResource, DemoDeleteScope)
}

func DemoEnforceWarehouseRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWarehouseResource, DemoReadScope)
}

func DemoEnforceWarehouseCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWarehouseResource, DemoCreateScope)
}

func DemoEnforceWarehouseUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWarehouseResource, DemoUpdateScope)
}

func DemoEnforceWarehouseDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWarehouseResource, DemoDeleteScope)
}

func DemoEnforceWebsiteRead(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWebsiteResource, DemoReadScope)
}

func DemoEnforceWebsiteCreate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWebsiteResource, DemoCreateScope)
}

func DemoEnforceWebsiteUpdate(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWebsiteResource, DemoUpdateScope)
}

func DemoEnforceWebsiteDelete(ctx context.Context) error {
	return DemoAuthorizeByResource(ctx, DemoWebsiteResource, DemoDeleteScope)
}

func DemoAuthContextFromRequestContext(ctx context.Context) (*entkit.AuthContext, error) {
	val := ctx.Value(entkit.AuthContextKey)
	if val == nil {
		err := fmt.Errorf("could not retrieve AuthContext")
		return nil, err
	}

	raw, ok := val.(*entkit.AuthContext)
	if !ok {
		return nil, fmt.Errorf("could not convert AuthContext")
	}
	return raw, nil
}
