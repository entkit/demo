// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/entkit/entkit"
	"github.com/entkit/entkit/common"
	"github.com/gin-gonic/gin"
)

func EntkitAuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		kc := entkit.NewBackendKeycloak(
			"https://lemur-4.cloud-iam.com/auth",
			"entkit-demo",
			"backend",
			"test-secret",
		)
		r, err = kc.MiddlewareReqHandlerFunc(w, r)
		if err == nil {
			next.ServeHTTP(w, r)
		}
	})
}

func EntkitAuthGinMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "POST, GET")
		c.Header("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		var err error
		kc := entkit.NewBackendKeycloak(
			"https://lemur-4.cloud-iam.com/auth",
			"entkit-demo",
			"backend",
			"test-secret",
		)
		c.Request, err = kc.MiddlewareReqHandlerFunc(c.Writer, c.Request)
		if err == nil {
			c.Next()
		} else {
			c.Abort()
		}
	}
}

func EntkitAuthorizeByResource(ctx context.Context, resource string, scope string) error {
	resource = entkit.PrepareName("Demo", resource)
	scope = entkit.PrepareName("Demo", scope)
	authContext, err := EntkitAuthContextFromRequestContext(ctx)
	if err != nil {
		return err
	}
	auth := false
	for _, p := range authContext.Permissions {
		if p.Resource == resource {
			if common.Contains(p.Scopes, scope) {
				auth = true
				break
			}
		}
	}
	if !auth {
		return errors.New("access restricted for " + resource + " " + scope)
	}
	return nil
}

func EntkitAuthContextFromRequestContext(ctx context.Context) (*entkit.AuthContext, error) {
	val := ctx.Value(entkit.AuthContextKey)
	if val == nil {
		err := fmt.Errorf("could not retrieve AuthContext")
		return nil, err
	}

	raw, ok := val.(*entkit.AuthContext)
	if !ok {
		return nil, fmt.Errorf("could not convert AuthContext")
	}
	return raw, nil
}
