// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/entkit/entkit-demo/ent/vendor"
	"github.com/google/uuid"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Schema holds the value of the "schema" field.
	Schema string `json:"schema,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges        VendorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Warehouses holds the value of the warehouses edge.
	Warehouses []*Warehouse `json:"warehouses,omitempty"`
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedWarehouses map[string][]*Warehouse
	namedProducts   map[string][]*Product
}

// WarehousesOrErr returns the Warehouses value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) WarehousesOrErr() ([]*Warehouse, error) {
	if e.loadedTypes[0] {
		return e.Warehouses, nil
	}
	return nil, &NotLoadedError{edge: "warehouses"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[1] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldName, vendor.FieldSchema:
			values[i] = new(sql.NullString)
		case vendor.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case vendor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vendor.FieldSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value.Valid {
				v.Schema = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vendor.
// This includes values selected through modifiers, order, etc.
func (v *Vendor) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryWarehouses queries the "warehouses" edge of the Vendor entity.
func (v *Vendor) QueryWarehouses() *WarehouseQuery {
	return NewVendorClient(v.config).QueryWarehouses(v)
}

// QueryProducts queries the "products" edge of the Vendor entity.
func (v *Vendor) QueryProducts() *ProductQuery {
	return NewVendorClient(v.config).QueryProducts(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return NewVendorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("schema=")
	builder.WriteString(v.Schema)
	builder.WriteByte(')')
	return builder.String()
}

// NamedWarehouses returns the Warehouses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Vendor) NamedWarehouses(name string) ([]*Warehouse, error) {
	if v.Edges.namedWarehouses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedWarehouses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Vendor) appendNamedWarehouses(name string, edges ...*Warehouse) {
	if v.Edges.namedWarehouses == nil {
		v.Edges.namedWarehouses = make(map[string][]*Warehouse)
	}
	if len(edges) == 0 {
		v.Edges.namedWarehouses[name] = []*Warehouse{}
	} else {
		v.Edges.namedWarehouses[name] = append(v.Edges.namedWarehouses[name], edges...)
	}
}

// NamedProducts returns the Products named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Vendor) NamedProducts(name string) ([]*Product, error) {
	if v.Edges.namedProducts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedProducts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Vendor) appendNamedProducts(name string, edges ...*Product) {
	if v.Edges.namedProducts == nil {
		v.Edges.namedProducts = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		v.Edges.namedProducts[name] = []*Product{}
	} else {
		v.Edges.namedProducts[name] = append(v.Edges.namedProducts[name], edges...)
	}
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor
