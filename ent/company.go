// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/entkit/entkit-demo/ent/company"
	"github.com/entkit/entkit-demo/ent/image"
	"github.com/google/uuid"
)

// Company is the model entity for the Company schema.
type Company struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyQuery when eager-loading is set.
	Edges        CompanyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompanyEdges holds the relations/edges for other nodes in the graph.
type CompanyEdges struct {
	// Countries holds the value of the countries edge.
	Countries []*Country `json:"countries,omitempty"`
	// Phones holds the value of the phones edge.
	Phones []*Phone `json:"phones,omitempty"`
	// Emails holds the value of the emails edge.
	Emails []*Email `json:"emails,omitempty"`
	// Websites holds the value of the websites edge.
	Websites []*Website `json:"websites,omitempty"`
	// Locations holds the value of the locations edge.
	Locations []*Location `json:"locations,omitempty"`
	// LogoImage holds the value of the logo_image edge.
	LogoImage *Image `json:"logo_image,omitempty"`
	// CoverImage holds the value of the cover_image edge.
	CoverImage *Image `json:"cover_image,omitempty"`
	// GalleryImages holds the value of the gallery_images edge.
	GalleryImages []*Image `json:"gallery_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedCountries     map[string][]*Country
	namedPhones        map[string][]*Phone
	namedEmails        map[string][]*Email
	namedWebsites      map[string][]*Website
	namedLocations     map[string][]*Location
	namedGalleryImages map[string][]*Image
}

// CountriesOrErr returns the Countries value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) CountriesOrErr() ([]*Country, error) {
	if e.loadedTypes[0] {
		return e.Countries, nil
	}
	return nil, &NotLoadedError{edge: "countries"}
}

// PhonesOrErr returns the Phones value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) PhonesOrErr() ([]*Phone, error) {
	if e.loadedTypes[1] {
		return e.Phones, nil
	}
	return nil, &NotLoadedError{edge: "phones"}
}

// EmailsOrErr returns the Emails value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) EmailsOrErr() ([]*Email, error) {
	if e.loadedTypes[2] {
		return e.Emails, nil
	}
	return nil, &NotLoadedError{edge: "emails"}
}

// WebsitesOrErr returns the Websites value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) WebsitesOrErr() ([]*Website, error) {
	if e.loadedTypes[3] {
		return e.Websites, nil
	}
	return nil, &NotLoadedError{edge: "websites"}
}

// LocationsOrErr returns the Locations value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) LocationsOrErr() ([]*Location, error) {
	if e.loadedTypes[4] {
		return e.Locations, nil
	}
	return nil, &NotLoadedError{edge: "locations"}
}

// LogoImageOrErr returns the LogoImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyEdges) LogoImageOrErr() (*Image, error) {
	if e.loadedTypes[5] {
		if e.LogoImage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.LogoImage, nil
	}
	return nil, &NotLoadedError{edge: "logo_image"}
}

// CoverImageOrErr returns the CoverImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyEdges) CoverImageOrErr() (*Image, error) {
	if e.loadedTypes[6] {
		if e.CoverImage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.CoverImage, nil
	}
	return nil, &NotLoadedError{edge: "cover_image"}
}

// GalleryImagesOrErr returns the GalleryImages value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) GalleryImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[7] {
		return e.GalleryImages, nil
	}
	return nil, &NotLoadedError{edge: "gallery_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Company) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case company.FieldName, company.FieldDescription:
			values[i] = new(sql.NullString)
		case company.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Company fields.
func (c *Company) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case company.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case company.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case company.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Company.
// This includes values selected through modifiers, order, etc.
func (c *Company) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCountries queries the "countries" edge of the Company entity.
func (c *Company) QueryCountries() *CountryQuery {
	return NewCompanyClient(c.config).QueryCountries(c)
}

// QueryPhones queries the "phones" edge of the Company entity.
func (c *Company) QueryPhones() *PhoneQuery {
	return NewCompanyClient(c.config).QueryPhones(c)
}

// QueryEmails queries the "emails" edge of the Company entity.
func (c *Company) QueryEmails() *EmailQuery {
	return NewCompanyClient(c.config).QueryEmails(c)
}

// QueryWebsites queries the "websites" edge of the Company entity.
func (c *Company) QueryWebsites() *WebsiteQuery {
	return NewCompanyClient(c.config).QueryWebsites(c)
}

// QueryLocations queries the "locations" edge of the Company entity.
func (c *Company) QueryLocations() *LocationQuery {
	return NewCompanyClient(c.config).QueryLocations(c)
}

// QueryLogoImage queries the "logo_image" edge of the Company entity.
func (c *Company) QueryLogoImage() *ImageQuery {
	return NewCompanyClient(c.config).QueryLogoImage(c)
}

// QueryCoverImage queries the "cover_image" edge of the Company entity.
func (c *Company) QueryCoverImage() *ImageQuery {
	return NewCompanyClient(c.config).QueryCoverImage(c)
}

// QueryGalleryImages queries the "gallery_images" edge of the Company entity.
func (c *Company) QueryGalleryImages() *ImageQuery {
	return NewCompanyClient(c.config).QueryGalleryImages(c)
}

// Update returns a builder for updating this Company.
// Note that you need to call Company.Unwrap() before calling this method if this Company
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Company) Update() *CompanyUpdateOne {
	return NewCompanyClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Company entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Company) Unwrap() *Company {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Company is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Company) String() string {
	var builder strings.Builder
	builder.WriteString("Company(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCountries returns the Countries named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedCountries(name string) ([]*Country, error) {
	if c.Edges.namedCountries == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCountries[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedCountries(name string, edges ...*Country) {
	if c.Edges.namedCountries == nil {
		c.Edges.namedCountries = make(map[string][]*Country)
	}
	if len(edges) == 0 {
		c.Edges.namedCountries[name] = []*Country{}
	} else {
		c.Edges.namedCountries[name] = append(c.Edges.namedCountries[name], edges...)
	}
}

// NamedPhones returns the Phones named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedPhones(name string) ([]*Phone, error) {
	if c.Edges.namedPhones == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPhones[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedPhones(name string, edges ...*Phone) {
	if c.Edges.namedPhones == nil {
		c.Edges.namedPhones = make(map[string][]*Phone)
	}
	if len(edges) == 0 {
		c.Edges.namedPhones[name] = []*Phone{}
	} else {
		c.Edges.namedPhones[name] = append(c.Edges.namedPhones[name], edges...)
	}
}

// NamedEmails returns the Emails named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedEmails(name string) ([]*Email, error) {
	if c.Edges.namedEmails == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedEmails[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedEmails(name string, edges ...*Email) {
	if c.Edges.namedEmails == nil {
		c.Edges.namedEmails = make(map[string][]*Email)
	}
	if len(edges) == 0 {
		c.Edges.namedEmails[name] = []*Email{}
	} else {
		c.Edges.namedEmails[name] = append(c.Edges.namedEmails[name], edges...)
	}
}

// NamedWebsites returns the Websites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedWebsites(name string) ([]*Website, error) {
	if c.Edges.namedWebsites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedWebsites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedWebsites(name string, edges ...*Website) {
	if c.Edges.namedWebsites == nil {
		c.Edges.namedWebsites = make(map[string][]*Website)
	}
	if len(edges) == 0 {
		c.Edges.namedWebsites[name] = []*Website{}
	} else {
		c.Edges.namedWebsites[name] = append(c.Edges.namedWebsites[name], edges...)
	}
}

// NamedLocations returns the Locations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedLocations(name string) ([]*Location, error) {
	if c.Edges.namedLocations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedLocations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedLocations(name string, edges ...*Location) {
	if c.Edges.namedLocations == nil {
		c.Edges.namedLocations = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		c.Edges.namedLocations[name] = []*Location{}
	} else {
		c.Edges.namedLocations[name] = append(c.Edges.namedLocations[name], edges...)
	}
}

// NamedGalleryImages returns the GalleryImages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Company) NamedGalleryImages(name string) ([]*Image, error) {
	if c.Edges.namedGalleryImages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedGalleryImages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Company) appendNamedGalleryImages(name string, edges ...*Image) {
	if c.Edges.namedGalleryImages == nil {
		c.Edges.namedGalleryImages = make(map[string][]*Image)
	}
	if len(edges) == 0 {
		c.Edges.namedGalleryImages[name] = []*Image{}
	} else {
		c.Edges.namedGalleryImages[name] = append(c.Edges.namedGalleryImages[name], edges...)
	}
}

// Companies is a parsable slice of Company.
type Companies []*Company
