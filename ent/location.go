// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/entkit/entkit-demo/ent/company"
	"github.com/entkit/entkit-demo/ent/country"
	"github.com/entkit/entkit-demo/ent/location"
	"github.com/google/uuid"
)

// Location is the model entity for the Location schema.
type Location struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Postcode holds the value of the "postcode" field.
	Postcode string `json:"postcode,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Suburb holds the value of the "suburb" field.
	Suburb string `json:"suburb,omitempty"`
	// StreetType holds the value of the "street_type" field.
	StreetType string `json:"street_type,omitempty"`
	// StreetName holds the value of the "street_name" field.
	StreetName string `json:"street_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocationQuery when eager-loading is set.
	Edges             LocationEdges `json:"edges"`
	company_locations *uuid.UUID
	country_locations *uuid.UUID
	selectValues      sql.SelectValues
}

// LocationEdges holds the relations/edges for other nodes in the graph.
type LocationEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocationEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocationEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[1] {
		if e.Country == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Location) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case location.FieldLatitude, location.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case location.FieldTitle, location.FieldDescription, location.FieldAddress, location.FieldPostcode, location.FieldType, location.FieldState, location.FieldSuburb, location.FieldStreetType, location.FieldStreetName:
			values[i] = new(sql.NullString)
		case location.FieldID:
			values[i] = new(uuid.UUID)
		case location.ForeignKeys[0]: // company_locations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case location.ForeignKeys[1]: // country_locations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Location fields.
func (l *Location) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case location.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case location.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				l.Title = value.String
			}
		case location.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				l.Description = value.String
			}
		case location.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				l.Latitude = value.Float64
			}
		case location.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				l.Longitude = value.Float64
			}
		case location.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				l.Address = value.String
			}
		case location.FieldPostcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postcode", values[i])
			} else if value.Valid {
				l.Postcode = value.String
			}
		case location.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				l.Type = value.String
			}
		case location.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				l.State = value.String
			}
		case location.FieldSuburb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suburb", values[i])
			} else if value.Valid {
				l.Suburb = value.String
			}
		case location.FieldStreetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_type", values[i])
			} else if value.Valid {
				l.StreetType = value.String
			}
		case location.FieldStreetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_name", values[i])
			} else if value.Valid {
				l.StreetName = value.String
			}
		case location.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field company_locations", values[i])
			} else if value.Valid {
				l.company_locations = new(uuid.UUID)
				*l.company_locations = *value.S.(*uuid.UUID)
			}
		case location.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field country_locations", values[i])
			} else if value.Valid {
				l.country_locations = new(uuid.UUID)
				*l.country_locations = *value.S.(*uuid.UUID)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Location.
// This includes values selected through modifiers, order, etc.
func (l *Location) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the Location entity.
func (l *Location) QueryCompany() *CompanyQuery {
	return NewLocationClient(l.config).QueryCompany(l)
}

// QueryCountry queries the "country" edge of the Location entity.
func (l *Location) QueryCountry() *CountryQuery {
	return NewLocationClient(l.config).QueryCountry(l)
}

// Update returns a builder for updating this Location.
// Note that you need to call Location.Unwrap() before calling this method if this Location
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Location) Update() *LocationUpdateOne {
	return NewLocationClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Location entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Location) Unwrap() *Location {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Location is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Location) String() string {
	var builder strings.Builder
	builder.WriteString("Location(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("title=")
	builder.WriteString(l.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(l.Description)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", l.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", l.Longitude))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(l.Address)
	builder.WriteString(", ")
	builder.WriteString("postcode=")
	builder.WriteString(l.Postcode)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(l.Type)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(l.State)
	builder.WriteString(", ")
	builder.WriteString("suburb=")
	builder.WriteString(l.Suburb)
	builder.WriteString(", ")
	builder.WriteString("street_type=")
	builder.WriteString(l.StreetType)
	builder.WriteString(", ")
	builder.WriteString("street_name=")
	builder.WriteString(l.StreetName)
	builder.WriteByte(')')
	return builder.String()
}

// Locations is a parsable slice of Location.
type Locations []*Location
