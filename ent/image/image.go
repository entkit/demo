// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldOriginalURL holds the string denoting the original_url field in the database.
	FieldOriginalURL = "original_url"
	// EdgeGalleryCompany holds the string denoting the gallery_company edge name in mutations.
	EdgeGalleryCompany = "gallery_company"
	// EdgeLogoCompany holds the string denoting the logo_company edge name in mutations.
	EdgeLogoCompany = "logo_company"
	// EdgeCoverCompany holds the string denoting the cover_company edge name in mutations.
	EdgeCoverCompany = "cover_company"
	// Table holds the table name of the image in the database.
	Table = "images"
	// GalleryCompanyTable is the table that holds the gallery_company relation/edge.
	GalleryCompanyTable = "images"
	// GalleryCompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	GalleryCompanyInverseTable = "companies"
	// GalleryCompanyColumn is the table column denoting the gallery_company relation/edge.
	GalleryCompanyColumn = "company_gallery_images"
	// LogoCompanyTable is the table that holds the logo_company relation/edge.
	LogoCompanyTable = "images"
	// LogoCompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	LogoCompanyInverseTable = "companies"
	// LogoCompanyColumn is the table column denoting the logo_company relation/edge.
	LogoCompanyColumn = "company_logo_image"
	// CoverCompanyTable is the table that holds the cover_company relation/edge.
	CoverCompanyTable = "images"
	// CoverCompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CoverCompanyInverseTable = "companies"
	// CoverCompanyColumn is the table column denoting the cover_company relation/edge.
	CoverCompanyColumn = "company_cover_image"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldOriginalURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_logo_image",
	"company_cover_image",
	"company_gallery_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// OriginalURLValidator is a validator for the "original_url" field. It is called by the builders before save.
	OriginalURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Order defines the ordering method for the Image queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByOriginalURL orders the results by the original_url field.
func ByOriginalURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOriginalURL, opts...).ToFunc()
}

// ByGalleryCompanyField orders the results by gallery_company field.
func ByGalleryCompanyField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGalleryCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByLogoCompanyField orders the results by logo_company field.
func ByLogoCompanyField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogoCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCoverCompanyField orders the results by cover_company field.
func ByCoverCompanyField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoverCompanyStep(), sql.OrderByField(field, opts...))
	}
}
func newGalleryCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GalleryCompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GalleryCompanyTable, GalleryCompanyColumn),
	)
}
func newLogoCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogoCompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, LogoCompanyTable, LogoCompanyColumn),
	)
}
func newCoverCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoverCompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CoverCompanyTable, CoverCompanyColumn),
	)
}
