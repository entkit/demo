// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/entkit/entkit-demo/ent/company"
	"github.com/entkit/entkit-demo/ent/country"
	"github.com/entkit/entkit-demo/ent/email"
	"github.com/entkit/entkit-demo/ent/location"
	"github.com/entkit/entkit-demo/ent/phone"
	"github.com/entkit/entkit-demo/ent/predicate"
	"github.com/entkit/entkit-demo/ent/website"
	"github.com/google/uuid"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks    []Hook
	mutation *CountryMutation
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CountryUpdate) SetName(s string) *CountryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetCode sets the "code" field.
func (cu *CountryUpdate) SetCode(s string) *CountryUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (cu *CountryUpdate) AddCompanyIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddCompanyIDs(ids...)
	return cu
}

// AddCompanies adds the "companies" edges to the Company entity.
func (cu *CountryUpdate) AddCompanies(c ...*Company) *CountryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCompanyIDs(ids...)
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (cu *CountryUpdate) AddPhoneIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddPhoneIDs(ids...)
	return cu
}

// AddPhones adds the "phones" edges to the Phone entity.
func (cu *CountryUpdate) AddPhones(p ...*Phone) *CountryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPhoneIDs(ids...)
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (cu *CountryUpdate) AddEmailIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddEmailIDs(ids...)
	return cu
}

// AddEmails adds the "emails" edges to the Email entity.
func (cu *CountryUpdate) AddEmails(e ...*Email) *CountryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEmailIDs(ids...)
}

// AddWebsiteIDs adds the "websites" edge to the Website entity by IDs.
func (cu *CountryUpdate) AddWebsiteIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddWebsiteIDs(ids...)
	return cu
}

// AddWebsites adds the "websites" edges to the Website entity.
func (cu *CountryUpdate) AddWebsites(w ...*Website) *CountryUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWebsiteIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cu *CountryUpdate) AddLocationIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.AddLocationIDs(ids...)
	return cu
}

// AddLocations adds the "locations" edges to the Location entity.
func (cu *CountryUpdate) AddLocations(l ...*Location) *CountryUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLocationIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (cu *CountryUpdate) ClearCompanies() *CountryUpdate {
	cu.mutation.ClearCompanies()
	return cu
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (cu *CountryUpdate) RemoveCompanyIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemoveCompanyIDs(ids...)
	return cu
}

// RemoveCompanies removes "companies" edges to Company entities.
func (cu *CountryUpdate) RemoveCompanies(c ...*Company) *CountryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCompanyIDs(ids...)
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (cu *CountryUpdate) ClearPhones() *CountryUpdate {
	cu.mutation.ClearPhones()
	return cu
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (cu *CountryUpdate) RemovePhoneIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemovePhoneIDs(ids...)
	return cu
}

// RemovePhones removes "phones" edges to Phone entities.
func (cu *CountryUpdate) RemovePhones(p ...*Phone) *CountryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePhoneIDs(ids...)
}

// ClearEmails clears all "emails" edges to the Email entity.
func (cu *CountryUpdate) ClearEmails() *CountryUpdate {
	cu.mutation.ClearEmails()
	return cu
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (cu *CountryUpdate) RemoveEmailIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemoveEmailIDs(ids...)
	return cu
}

// RemoveEmails removes "emails" edges to Email entities.
func (cu *CountryUpdate) RemoveEmails(e ...*Email) *CountryUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEmailIDs(ids...)
}

// ClearWebsites clears all "websites" edges to the Website entity.
func (cu *CountryUpdate) ClearWebsites() *CountryUpdate {
	cu.mutation.ClearWebsites()
	return cu
}

// RemoveWebsiteIDs removes the "websites" edge to Website entities by IDs.
func (cu *CountryUpdate) RemoveWebsiteIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemoveWebsiteIDs(ids...)
	return cu
}

// RemoveWebsites removes "websites" edges to Website entities.
func (cu *CountryUpdate) RemoveWebsites(w ...*Website) *CountryUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWebsiteIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cu *CountryUpdate) ClearLocations() *CountryUpdate {
	cu.mutation.ClearLocations()
	return cu
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cu *CountryUpdate) RemoveLocationIDs(ids ...uuid.UUID) *CountryUpdate {
	cu.mutation.RemoveLocationIDs(ids...)
	return cu
}

// RemoveLocations removes "locations" edges to Location entities.
func (cu *CountryUpdate) RemoveLocations(l ...*Location) *CountryUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CountryMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CountryUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := country.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Country.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Code(); ok {
		if err := country.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Country.code": %w`, err)}
		}
	}
	return nil
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(country.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if cu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !cu.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !cu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !cu.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWebsitesIDs(); len(nodes) > 0 && !cu.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WebsitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryMutation
}

// SetName sets the "name" field.
func (cuo *CountryUpdateOne) SetName(s string) *CountryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CountryUpdateOne) SetCode(s string) *CountryUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (cuo *CountryUpdateOne) AddCompanyIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddCompanyIDs(ids...)
	return cuo
}

// AddCompanies adds the "companies" edges to the Company entity.
func (cuo *CountryUpdateOne) AddCompanies(c ...*Company) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCompanyIDs(ids...)
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (cuo *CountryUpdateOne) AddPhoneIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddPhoneIDs(ids...)
	return cuo
}

// AddPhones adds the "phones" edges to the Phone entity.
func (cuo *CountryUpdateOne) AddPhones(p ...*Phone) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPhoneIDs(ids...)
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (cuo *CountryUpdateOne) AddEmailIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddEmailIDs(ids...)
	return cuo
}

// AddEmails adds the "emails" edges to the Email entity.
func (cuo *CountryUpdateOne) AddEmails(e ...*Email) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEmailIDs(ids...)
}

// AddWebsiteIDs adds the "websites" edge to the Website entity by IDs.
func (cuo *CountryUpdateOne) AddWebsiteIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddWebsiteIDs(ids...)
	return cuo
}

// AddWebsites adds the "websites" edges to the Website entity.
func (cuo *CountryUpdateOne) AddWebsites(w ...*Website) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWebsiteIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cuo *CountryUpdateOne) AddLocationIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.AddLocationIDs(ids...)
	return cuo
}

// AddLocations adds the "locations" edges to the Location entity.
func (cuo *CountryUpdateOne) AddLocations(l ...*Location) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLocationIDs(ids...)
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (cuo *CountryUpdateOne) ClearCompanies() *CountryUpdateOne {
	cuo.mutation.ClearCompanies()
	return cuo
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (cuo *CountryUpdateOne) RemoveCompanyIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemoveCompanyIDs(ids...)
	return cuo
}

// RemoveCompanies removes "companies" edges to Company entities.
func (cuo *CountryUpdateOne) RemoveCompanies(c ...*Company) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCompanyIDs(ids...)
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (cuo *CountryUpdateOne) ClearPhones() *CountryUpdateOne {
	cuo.mutation.ClearPhones()
	return cuo
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (cuo *CountryUpdateOne) RemovePhoneIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemovePhoneIDs(ids...)
	return cuo
}

// RemovePhones removes "phones" edges to Phone entities.
func (cuo *CountryUpdateOne) RemovePhones(p ...*Phone) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePhoneIDs(ids...)
}

// ClearEmails clears all "emails" edges to the Email entity.
func (cuo *CountryUpdateOne) ClearEmails() *CountryUpdateOne {
	cuo.mutation.ClearEmails()
	return cuo
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (cuo *CountryUpdateOne) RemoveEmailIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemoveEmailIDs(ids...)
	return cuo
}

// RemoveEmails removes "emails" edges to Email entities.
func (cuo *CountryUpdateOne) RemoveEmails(e ...*Email) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEmailIDs(ids...)
}

// ClearWebsites clears all "websites" edges to the Website entity.
func (cuo *CountryUpdateOne) ClearWebsites() *CountryUpdateOne {
	cuo.mutation.ClearWebsites()
	return cuo
}

// RemoveWebsiteIDs removes the "websites" edge to Website entities by IDs.
func (cuo *CountryUpdateOne) RemoveWebsiteIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemoveWebsiteIDs(ids...)
	return cuo
}

// RemoveWebsites removes "websites" edges to Website entities.
func (cuo *CountryUpdateOne) RemoveWebsites(w ...*Website) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWebsiteIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cuo *CountryUpdateOne) ClearLocations() *CountryUpdateOne {
	cuo.mutation.ClearLocations()
	return cuo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cuo *CountryUpdateOne) RemoveLocationIDs(ids ...uuid.UUID) *CountryUpdateOne {
	cuo.mutation.RemoveLocationIDs(ids...)
	return cuo
}

// RemoveLocations removes "locations" edges to Location entities.
func (cuo *CountryUpdateOne) RemoveLocations(l ...*Location) *CountryUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLocationIDs(ids...)
}

// Where appends a list predicates to the CountryUpdate builder.
func (cuo *CountryUpdateOne) Where(ps ...predicate.Country) *CountryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	return withHooks[*Country, CountryMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CountryUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := country.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Country.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Code(); ok {
		if err := country.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Country.code": %w`, err)}
		}
	}
	return nil
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(country.Table, country.Columns, sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(country.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(country.FieldCode, field.TypeString, value)
	}
	if cuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !cuo.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CompaniesTable,
			Columns: country.CompaniesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !cuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.PhonesTable,
			Columns: []string{country.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !cuo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.EmailsTable,
			Columns: []string{country.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWebsitesIDs(); len(nodes) > 0 && !cuo.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WebsitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.WebsitesTable,
			Columns: []string{country.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   country.LocationsTable,
			Columns: []string{country.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
