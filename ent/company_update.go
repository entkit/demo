// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/entkit/entkit-demo/ent/company"
	"github.com/entkit/entkit-demo/ent/country"
	"github.com/entkit/entkit-demo/ent/email"
	"github.com/entkit/entkit-demo/ent/image"
	"github.com/entkit/entkit-demo/ent/location"
	"github.com/entkit/entkit-demo/ent/phone"
	"github.com/entkit/entkit-demo/ent/predicate"
	"github.com/entkit/entkit-demo/ent/website"
	"github.com/google/uuid"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CompanyUpdate) SetDescription(s string) *CompanyUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (cu *CompanyUpdate) AddCountryIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddCountryIDs(ids...)
	return cu
}

// AddCountries adds the "countries" edges to the Country entity.
func (cu *CompanyUpdate) AddCountries(c ...*Country) *CompanyUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCountryIDs(ids...)
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (cu *CompanyUpdate) AddPhoneIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddPhoneIDs(ids...)
	return cu
}

// AddPhones adds the "phones" edges to the Phone entity.
func (cu *CompanyUpdate) AddPhones(p ...*Phone) *CompanyUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPhoneIDs(ids...)
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (cu *CompanyUpdate) AddEmailIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddEmailIDs(ids...)
	return cu
}

// AddEmails adds the "emails" edges to the Email entity.
func (cu *CompanyUpdate) AddEmails(e ...*Email) *CompanyUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEmailIDs(ids...)
}

// AddWebsiteIDs adds the "websites" edge to the Website entity by IDs.
func (cu *CompanyUpdate) AddWebsiteIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddWebsiteIDs(ids...)
	return cu
}

// AddWebsites adds the "websites" edges to the Website entity.
func (cu *CompanyUpdate) AddWebsites(w ...*Website) *CompanyUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.AddWebsiteIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cu *CompanyUpdate) AddLocationIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddLocationIDs(ids...)
	return cu
}

// AddLocations adds the "locations" edges to the Location entity.
func (cu *CompanyUpdate) AddLocations(l ...*Location) *CompanyUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLocationIDs(ids...)
}

// SetLogoImageID sets the "logo_image" edge to the Image entity by ID.
func (cu *CompanyUpdate) SetLogoImageID(id uuid.UUID) *CompanyUpdate {
	cu.mutation.SetLogoImageID(id)
	return cu
}

// SetNillableLogoImageID sets the "logo_image" edge to the Image entity by ID if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLogoImageID(id *uuid.UUID) *CompanyUpdate {
	if id != nil {
		cu = cu.SetLogoImageID(*id)
	}
	return cu
}

// SetLogoImage sets the "logo_image" edge to the Image entity.
func (cu *CompanyUpdate) SetLogoImage(i *Image) *CompanyUpdate {
	return cu.SetLogoImageID(i.ID)
}

// SetCoverImageID sets the "cover_image" edge to the Image entity by ID.
func (cu *CompanyUpdate) SetCoverImageID(id uuid.UUID) *CompanyUpdate {
	cu.mutation.SetCoverImageID(id)
	return cu
}

// SetNillableCoverImageID sets the "cover_image" edge to the Image entity by ID if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCoverImageID(id *uuid.UUID) *CompanyUpdate {
	if id != nil {
		cu = cu.SetCoverImageID(*id)
	}
	return cu
}

// SetCoverImage sets the "cover_image" edge to the Image entity.
func (cu *CompanyUpdate) SetCoverImage(i *Image) *CompanyUpdate {
	return cu.SetCoverImageID(i.ID)
}

// AddGalleryImageIDs adds the "gallery_images" edge to the Image entity by IDs.
func (cu *CompanyUpdate) AddGalleryImageIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddGalleryImageIDs(ids...)
	return cu
}

// AddGalleryImages adds the "gallery_images" edges to the Image entity.
func (cu *CompanyUpdate) AddGalleryImages(i ...*Image) *CompanyUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddGalleryImageIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearCountries clears all "countries" edges to the Country entity.
func (cu *CompanyUpdate) ClearCountries() *CompanyUpdate {
	cu.mutation.ClearCountries()
	return cu
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (cu *CompanyUpdate) RemoveCountryIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveCountryIDs(ids...)
	return cu
}

// RemoveCountries removes "countries" edges to Country entities.
func (cu *CompanyUpdate) RemoveCountries(c ...*Country) *CompanyUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCountryIDs(ids...)
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (cu *CompanyUpdate) ClearPhones() *CompanyUpdate {
	cu.mutation.ClearPhones()
	return cu
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (cu *CompanyUpdate) RemovePhoneIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemovePhoneIDs(ids...)
	return cu
}

// RemovePhones removes "phones" edges to Phone entities.
func (cu *CompanyUpdate) RemovePhones(p ...*Phone) *CompanyUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePhoneIDs(ids...)
}

// ClearEmails clears all "emails" edges to the Email entity.
func (cu *CompanyUpdate) ClearEmails() *CompanyUpdate {
	cu.mutation.ClearEmails()
	return cu
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (cu *CompanyUpdate) RemoveEmailIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveEmailIDs(ids...)
	return cu
}

// RemoveEmails removes "emails" edges to Email entities.
func (cu *CompanyUpdate) RemoveEmails(e ...*Email) *CompanyUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEmailIDs(ids...)
}

// ClearWebsites clears all "websites" edges to the Website entity.
func (cu *CompanyUpdate) ClearWebsites() *CompanyUpdate {
	cu.mutation.ClearWebsites()
	return cu
}

// RemoveWebsiteIDs removes the "websites" edge to Website entities by IDs.
func (cu *CompanyUpdate) RemoveWebsiteIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveWebsiteIDs(ids...)
	return cu
}

// RemoveWebsites removes "websites" edges to Website entities.
func (cu *CompanyUpdate) RemoveWebsites(w ...*Website) *CompanyUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cu.RemoveWebsiteIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cu *CompanyUpdate) ClearLocations() *CompanyUpdate {
	cu.mutation.ClearLocations()
	return cu
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cu *CompanyUpdate) RemoveLocationIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveLocationIDs(ids...)
	return cu
}

// RemoveLocations removes "locations" edges to Location entities.
func (cu *CompanyUpdate) RemoveLocations(l ...*Location) *CompanyUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLocationIDs(ids...)
}

// ClearLogoImage clears the "logo_image" edge to the Image entity.
func (cu *CompanyUpdate) ClearLogoImage() *CompanyUpdate {
	cu.mutation.ClearLogoImage()
	return cu
}

// ClearCoverImage clears the "cover_image" edge to the Image entity.
func (cu *CompanyUpdate) ClearCoverImage() *CompanyUpdate {
	cu.mutation.ClearCoverImage()
	return cu
}

// ClearGalleryImages clears all "gallery_images" edges to the Image entity.
func (cu *CompanyUpdate) ClearGalleryImages() *CompanyUpdate {
	cu.mutation.ClearGalleryImages()
	return cu
}

// RemoveGalleryImageIDs removes the "gallery_images" edge to Image entities by IDs.
func (cu *CompanyUpdate) RemoveGalleryImageIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveGalleryImageIDs(ids...)
	return cu
}

// RemoveGalleryImages removes "gallery_images" edges to Image entities.
func (cu *CompanyUpdate) RemoveGalleryImages(i ...*Image) *CompanyUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveGalleryImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CompanyMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := company.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Company.description": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !cu.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !cu.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !cu.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedWebsitesIDs(); len(nodes) > 0 && !cu.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WebsitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LogoImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.LogoImageTable,
			Columns: []string{company.LogoImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LogoImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.LogoImageTable,
			Columns: []string{company.LogoImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.CoverImageTable,
			Columns: []string{company.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.CoverImageTable,
			Columns: []string{company.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GalleryImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGalleryImagesIDs(); len(nodes) > 0 && !cu.mutation.GalleryImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GalleryImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CompanyUpdateOne) SetDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (cuo *CompanyUpdateOne) AddCountryIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddCountryIDs(ids...)
	return cuo
}

// AddCountries adds the "countries" edges to the Country entity.
func (cuo *CompanyUpdateOne) AddCountries(c ...*Country) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCountryIDs(ids...)
}

// AddPhoneIDs adds the "phones" edge to the Phone entity by IDs.
func (cuo *CompanyUpdateOne) AddPhoneIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddPhoneIDs(ids...)
	return cuo
}

// AddPhones adds the "phones" edges to the Phone entity.
func (cuo *CompanyUpdateOne) AddPhones(p ...*Phone) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPhoneIDs(ids...)
}

// AddEmailIDs adds the "emails" edge to the Email entity by IDs.
func (cuo *CompanyUpdateOne) AddEmailIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddEmailIDs(ids...)
	return cuo
}

// AddEmails adds the "emails" edges to the Email entity.
func (cuo *CompanyUpdateOne) AddEmails(e ...*Email) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEmailIDs(ids...)
}

// AddWebsiteIDs adds the "websites" edge to the Website entity by IDs.
func (cuo *CompanyUpdateOne) AddWebsiteIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddWebsiteIDs(ids...)
	return cuo
}

// AddWebsites adds the "websites" edges to the Website entity.
func (cuo *CompanyUpdateOne) AddWebsites(w ...*Website) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.AddWebsiteIDs(ids...)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (cuo *CompanyUpdateOne) AddLocationIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddLocationIDs(ids...)
	return cuo
}

// AddLocations adds the "locations" edges to the Location entity.
func (cuo *CompanyUpdateOne) AddLocations(l ...*Location) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLocationIDs(ids...)
}

// SetLogoImageID sets the "logo_image" edge to the Image entity by ID.
func (cuo *CompanyUpdateOne) SetLogoImageID(id uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.SetLogoImageID(id)
	return cuo
}

// SetNillableLogoImageID sets the "logo_image" edge to the Image entity by ID if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLogoImageID(id *uuid.UUID) *CompanyUpdateOne {
	if id != nil {
		cuo = cuo.SetLogoImageID(*id)
	}
	return cuo
}

// SetLogoImage sets the "logo_image" edge to the Image entity.
func (cuo *CompanyUpdateOne) SetLogoImage(i *Image) *CompanyUpdateOne {
	return cuo.SetLogoImageID(i.ID)
}

// SetCoverImageID sets the "cover_image" edge to the Image entity by ID.
func (cuo *CompanyUpdateOne) SetCoverImageID(id uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.SetCoverImageID(id)
	return cuo
}

// SetNillableCoverImageID sets the "cover_image" edge to the Image entity by ID if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCoverImageID(id *uuid.UUID) *CompanyUpdateOne {
	if id != nil {
		cuo = cuo.SetCoverImageID(*id)
	}
	return cuo
}

// SetCoverImage sets the "cover_image" edge to the Image entity.
func (cuo *CompanyUpdateOne) SetCoverImage(i *Image) *CompanyUpdateOne {
	return cuo.SetCoverImageID(i.ID)
}

// AddGalleryImageIDs adds the "gallery_images" edge to the Image entity by IDs.
func (cuo *CompanyUpdateOne) AddGalleryImageIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddGalleryImageIDs(ids...)
	return cuo
}

// AddGalleryImages adds the "gallery_images" edges to the Image entity.
func (cuo *CompanyUpdateOne) AddGalleryImages(i ...*Image) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddGalleryImageIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearCountries clears all "countries" edges to the Country entity.
func (cuo *CompanyUpdateOne) ClearCountries() *CompanyUpdateOne {
	cuo.mutation.ClearCountries()
	return cuo
}

// RemoveCountryIDs removes the "countries" edge to Country entities by IDs.
func (cuo *CompanyUpdateOne) RemoveCountryIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveCountryIDs(ids...)
	return cuo
}

// RemoveCountries removes "countries" edges to Country entities.
func (cuo *CompanyUpdateOne) RemoveCountries(c ...*Country) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCountryIDs(ids...)
}

// ClearPhones clears all "phones" edges to the Phone entity.
func (cuo *CompanyUpdateOne) ClearPhones() *CompanyUpdateOne {
	cuo.mutation.ClearPhones()
	return cuo
}

// RemovePhoneIDs removes the "phones" edge to Phone entities by IDs.
func (cuo *CompanyUpdateOne) RemovePhoneIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemovePhoneIDs(ids...)
	return cuo
}

// RemovePhones removes "phones" edges to Phone entities.
func (cuo *CompanyUpdateOne) RemovePhones(p ...*Phone) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePhoneIDs(ids...)
}

// ClearEmails clears all "emails" edges to the Email entity.
func (cuo *CompanyUpdateOne) ClearEmails() *CompanyUpdateOne {
	cuo.mutation.ClearEmails()
	return cuo
}

// RemoveEmailIDs removes the "emails" edge to Email entities by IDs.
func (cuo *CompanyUpdateOne) RemoveEmailIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveEmailIDs(ids...)
	return cuo
}

// RemoveEmails removes "emails" edges to Email entities.
func (cuo *CompanyUpdateOne) RemoveEmails(e ...*Email) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEmailIDs(ids...)
}

// ClearWebsites clears all "websites" edges to the Website entity.
func (cuo *CompanyUpdateOne) ClearWebsites() *CompanyUpdateOne {
	cuo.mutation.ClearWebsites()
	return cuo
}

// RemoveWebsiteIDs removes the "websites" edge to Website entities by IDs.
func (cuo *CompanyUpdateOne) RemoveWebsiteIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveWebsiteIDs(ids...)
	return cuo
}

// RemoveWebsites removes "websites" edges to Website entities.
func (cuo *CompanyUpdateOne) RemoveWebsites(w ...*Website) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cuo.RemoveWebsiteIDs(ids...)
}

// ClearLocations clears all "locations" edges to the Location entity.
func (cuo *CompanyUpdateOne) ClearLocations() *CompanyUpdateOne {
	cuo.mutation.ClearLocations()
	return cuo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (cuo *CompanyUpdateOne) RemoveLocationIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveLocationIDs(ids...)
	return cuo
}

// RemoveLocations removes "locations" edges to Location entities.
func (cuo *CompanyUpdateOne) RemoveLocations(l ...*Location) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLocationIDs(ids...)
}

// ClearLogoImage clears the "logo_image" edge to the Image entity.
func (cuo *CompanyUpdateOne) ClearLogoImage() *CompanyUpdateOne {
	cuo.mutation.ClearLogoImage()
	return cuo
}

// ClearCoverImage clears the "cover_image" edge to the Image entity.
func (cuo *CompanyUpdateOne) ClearCoverImage() *CompanyUpdateOne {
	cuo.mutation.ClearCoverImage()
	return cuo
}

// ClearGalleryImages clears all "gallery_images" edges to the Image entity.
func (cuo *CompanyUpdateOne) ClearGalleryImages() *CompanyUpdateOne {
	cuo.mutation.ClearGalleryImages()
	return cuo
}

// RemoveGalleryImageIDs removes the "gallery_images" edge to Image entities by IDs.
func (cuo *CompanyUpdateOne) RemoveGalleryImageIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveGalleryImageIDs(ids...)
	return cuo
}

// RemoveGalleryImages removes "gallery_images" edges to Image entities.
func (cuo *CompanyUpdateOne) RemoveGalleryImages(i ...*Image) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveGalleryImageIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks[*Company, CompanyMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := company.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Company.description": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCountriesIDs(); len(nodes) > 0 && !cuo.mutation.CountriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   company.CountriesTable,
			Columns: company.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPhonesIDs(); len(nodes) > 0 && !cuo.mutation.PhonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PhonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.PhonesTable,
			Columns: []string{company.PhonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phone.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEmailsIDs(); len(nodes) > 0 && !cuo.mutation.EmailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.EmailsTable,
			Columns: []string{company.EmailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(email.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedWebsitesIDs(); len(nodes) > 0 && !cuo.mutation.WebsitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WebsitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.WebsitesTable,
			Columns: []string{company.WebsitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !cuo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.LocationsTable,
			Columns: []string{company.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LogoImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.LogoImageTable,
			Columns: []string{company.LogoImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LogoImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.LogoImageTable,
			Columns: []string{company.LogoImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.CoverImageTable,
			Columns: []string{company.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.CoverImageTable,
			Columns: []string{company.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GalleryImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGalleryImagesIDs(); len(nodes) > 0 && !cuo.mutation.GalleryImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GalleryImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.GalleryImagesTable,
			Columns: []string{company.GalleryImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
