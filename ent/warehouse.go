// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/entkit/entkit-demo/ent/vendor"
	"github.com/entkit/entkit-demo/ent/warehouse"
	"github.com/google/uuid"
)

// Warehouse is the model entity for the Warehouse schema.
type Warehouse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LastUpdate holds the value of the "last_update" field.
	LastUpdate *time.Time `json:"last_update,omitempty"`
	// OriginalData holds the value of the "original_data" field.
	OriginalData *string `json:"original_data,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Filters holds the value of the "filters" field.
	Filters []string `json:"filters,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarehouseQuery when eager-loading is set.
	Edges             WarehouseEdges `json:"edges"`
	vendor_warehouses *uuid.UUID
	selectValues      sql.SelectValues
}

// WarehouseEdges holds the relations/edges for other nodes in the graph.
type WarehouseEdges struct {
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// Vendor holds the value of the vendor edge.
	Vendor *Vendor `json:"vendor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedProducts map[string][]*Product
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e WarehouseEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarehouseEdges) VendorOrErr() (*Vendor, error) {
	if e.loadedTypes[1] {
		if e.Vendor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.Vendor, nil
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warehouse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldFilters:
			values[i] = new([]byte)
		case warehouse.FieldEnabled:
			values[i] = new(sql.NullBool)
		case warehouse.FieldName, warehouse.FieldOriginalData:
			values[i] = new(sql.NullString)
		case warehouse.FieldLastUpdate:
			values[i] = new(sql.NullTime)
		case warehouse.FieldID:
			values[i] = new(uuid.UUID)
		case warehouse.ForeignKeys[0]: // vendor_warehouses
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warehouse fields.
func (w *Warehouse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case warehouse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warehouse.FieldLastUpdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_update", values[i])
			} else if value.Valid {
				w.LastUpdate = new(time.Time)
				*w.LastUpdate = value.Time
			}
		case warehouse.FieldOriginalData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_data", values[i])
			} else if value.Valid {
				w.OriginalData = new(string)
				*w.OriginalData = value.String
			}
		case warehouse.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				w.Enabled = value.Bool
			}
		case warehouse.FieldFilters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field filters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Filters); err != nil {
					return fmt.Errorf("unmarshal field filters: %w", err)
				}
			}
		case warehouse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_warehouses", values[i])
			} else if value.Valid {
				w.vendor_warehouses = new(uuid.UUID)
				*w.vendor_warehouses = *value.S.(*uuid.UUID)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Warehouse.
// This includes values selected through modifiers, order, etc.
func (w *Warehouse) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the Warehouse entity.
func (w *Warehouse) QueryProducts() *ProductQuery {
	return NewWarehouseClient(w.config).QueryProducts(w)
}

// QueryVendor queries the "vendor" edge of the Warehouse entity.
func (w *Warehouse) QueryVendor() *VendorQuery {
	return NewWarehouseClient(w.config).QueryVendor(w)
}

// Update returns a builder for updating this Warehouse.
// Note that you need to call Warehouse.Unwrap() before calling this method if this Warehouse
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warehouse) Update() *WarehouseUpdateOne {
	return NewWarehouseClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Warehouse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warehouse) Unwrap() *Warehouse {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Warehouse is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warehouse) String() string {
	var builder strings.Builder
	builder.WriteString("Warehouse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	if v := w.LastUpdate; v != nil {
		builder.WriteString("last_update=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := w.OriginalData; v != nil {
		builder.WriteString("original_data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", w.Enabled))
	builder.WriteString(", ")
	builder.WriteString("filters=")
	builder.WriteString(fmt.Sprintf("%v", w.Filters))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProducts returns the Products named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Warehouse) NamedProducts(name string) ([]*Product, error) {
	if w.Edges.namedProducts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedProducts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Warehouse) appendNamedProducts(name string, edges ...*Product) {
	if w.Edges.namedProducts == nil {
		w.Edges.namedProducts = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		w.Edges.namedProducts[name] = []*Product{}
	} else {
		w.Edges.namedProducts[name] = append(w.Edges.namedProducts[name], edges...)
	}
}

// Warehouses is a parsable slice of Warehouse.
type Warehouses []*Warehouse
