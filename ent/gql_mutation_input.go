// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/entkit/entkit-demo/ent/schema/enums"
	"github.com/google/uuid"
)

// CreateCompanyInput represents a mutation input for creating companies.
type CreateCompanyInput struct {
	Name            string
	Description     string
	CountryIDs      []uuid.UUID
	PhoneIDs        []uuid.UUID
	EmailIDs        []uuid.UUID
	WebsiteIDs      []uuid.UUID
	LocationIDs     []uuid.UUID
	LogoImageID     *uuid.UUID
	CoverImageID    *uuid.UUID
	GalleryImageIDs []uuid.UUID
}

// Mutate applies the CreateCompanyInput on the CompanyMutation builder.
func (i *CreateCompanyInput) Mutate(m *CompanyMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.CountryIDs; len(v) > 0 {
		m.AddCountryIDs(v...)
	}
	if v := i.PhoneIDs; len(v) > 0 {
		m.AddPhoneIDs(v...)
	}
	if v := i.EmailIDs; len(v) > 0 {
		m.AddEmailIDs(v...)
	}
	if v := i.WebsiteIDs; len(v) > 0 {
		m.AddWebsiteIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.LogoImageID; v != nil {
		m.SetLogoImageID(*v)
	}
	if v := i.CoverImageID; v != nil {
		m.SetCoverImageID(*v)
	}
	if v := i.GalleryImageIDs; len(v) > 0 {
		m.AddGalleryImageIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCompanyInput on the CompanyCreate builder.
func (c *CompanyCreate) SetInput(i CreateCompanyInput) *CompanyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyInput represents a mutation input for updating companies.
type UpdateCompanyInput struct {
	Name                  *string
	Description           *string
	ClearCountries        bool
	AddCountryIDs         []uuid.UUID
	RemoveCountryIDs      []uuid.UUID
	ClearPhones           bool
	AddPhoneIDs           []uuid.UUID
	RemovePhoneIDs        []uuid.UUID
	ClearEmails           bool
	AddEmailIDs           []uuid.UUID
	RemoveEmailIDs        []uuid.UUID
	ClearWebsites         bool
	AddWebsiteIDs         []uuid.UUID
	RemoveWebsiteIDs      []uuid.UUID
	ClearLocations        bool
	AddLocationIDs        []uuid.UUID
	RemoveLocationIDs     []uuid.UUID
	ClearLogoImage        bool
	LogoImageID           *uuid.UUID
	ClearCoverImage       bool
	CoverImageID          *uuid.UUID
	ClearGalleryImages    bool
	AddGalleryImageIDs    []uuid.UUID
	RemoveGalleryImageIDs []uuid.UUID
}

// Mutate applies the UpdateCompanyInput on the CompanyMutation builder.
func (i *UpdateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearCountries {
		m.ClearCountries()
	}
	if v := i.AddCountryIDs; len(v) > 0 {
		m.AddCountryIDs(v...)
	}
	if v := i.RemoveCountryIDs; len(v) > 0 {
		m.RemoveCountryIDs(v...)
	}
	if i.ClearPhones {
		m.ClearPhones()
	}
	if v := i.AddPhoneIDs; len(v) > 0 {
		m.AddPhoneIDs(v...)
	}
	if v := i.RemovePhoneIDs; len(v) > 0 {
		m.RemovePhoneIDs(v...)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.AddEmailIDs; len(v) > 0 {
		m.AddEmailIDs(v...)
	}
	if v := i.RemoveEmailIDs; len(v) > 0 {
		m.RemoveEmailIDs(v...)
	}
	if i.ClearWebsites {
		m.ClearWebsites()
	}
	if v := i.AddWebsiteIDs; len(v) > 0 {
		m.AddWebsiteIDs(v...)
	}
	if v := i.RemoveWebsiteIDs; len(v) > 0 {
		m.RemoveWebsiteIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
	if i.ClearLogoImage {
		m.ClearLogoImage()
	}
	if v := i.LogoImageID; v != nil {
		m.SetLogoImageID(*v)
	}
	if i.ClearCoverImage {
		m.ClearCoverImage()
	}
	if v := i.CoverImageID; v != nil {
		m.SetCoverImageID(*v)
	}
	if i.ClearGalleryImages {
		m.ClearGalleryImages()
	}
	if v := i.AddGalleryImageIDs; len(v) > 0 {
		m.AddGalleryImageIDs(v...)
	}
	if v := i.RemoveGalleryImageIDs; len(v) > 0 {
		m.RemoveGalleryImageIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdate builder.
func (c *CompanyUpdate) SetInput(i UpdateCompanyInput) *CompanyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdateOne builder.
func (c *CompanyUpdateOne) SetInput(i UpdateCompanyInput) *CompanyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCountryInput represents a mutation input for creating countries.
type CreateCountryInput struct {
	Name        string
	Code        string
	CompanyIDs  []uuid.UUID
	PhoneIDs    []uuid.UUID
	EmailIDs    []uuid.UUID
	WebsiteIDs  []uuid.UUID
	LocationIDs []uuid.UUID
}

// Mutate applies the CreateCountryInput on the CountryMutation builder.
func (i *CreateCountryInput) Mutate(m *CountryMutation) {
	m.SetName(i.Name)
	m.SetCode(i.Code)
	if v := i.CompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.PhoneIDs; len(v) > 0 {
		m.AddPhoneIDs(v...)
	}
	if v := i.EmailIDs; len(v) > 0 {
		m.AddEmailIDs(v...)
	}
	if v := i.WebsiteIDs; len(v) > 0 {
		m.AddWebsiteIDs(v...)
	}
	if v := i.LocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCountryInput on the CountryCreate builder.
func (c *CountryCreate) SetInput(i CreateCountryInput) *CountryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCountryInput represents a mutation input for updating countries.
type UpdateCountryInput struct {
	Name              *string
	Code              *string
	ClearCompanies    bool
	AddCompanyIDs     []uuid.UUID
	RemoveCompanyIDs  []uuid.UUID
	ClearPhones       bool
	AddPhoneIDs       []uuid.UUID
	RemovePhoneIDs    []uuid.UUID
	ClearEmails       bool
	AddEmailIDs       []uuid.UUID
	RemoveEmailIDs    []uuid.UUID
	ClearWebsites     bool
	AddWebsiteIDs     []uuid.UUID
	RemoveWebsiteIDs  []uuid.UUID
	ClearLocations    bool
	AddLocationIDs    []uuid.UUID
	RemoveLocationIDs []uuid.UUID
}

// Mutate applies the UpdateCountryInput on the CountryMutation builder.
func (i *UpdateCountryInput) Mutate(m *CountryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearCompanies {
		m.ClearCompanies()
	}
	if v := i.AddCompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.RemoveCompanyIDs; len(v) > 0 {
		m.RemoveCompanyIDs(v...)
	}
	if i.ClearPhones {
		m.ClearPhones()
	}
	if v := i.AddPhoneIDs; len(v) > 0 {
		m.AddPhoneIDs(v...)
	}
	if v := i.RemovePhoneIDs; len(v) > 0 {
		m.RemovePhoneIDs(v...)
	}
	if i.ClearEmails {
		m.ClearEmails()
	}
	if v := i.AddEmailIDs; len(v) > 0 {
		m.AddEmailIDs(v...)
	}
	if v := i.RemoveEmailIDs; len(v) > 0 {
		m.RemoveEmailIDs(v...)
	}
	if i.ClearWebsites {
		m.ClearWebsites()
	}
	if v := i.AddWebsiteIDs; len(v) > 0 {
		m.AddWebsiteIDs(v...)
	}
	if v := i.RemoveWebsiteIDs; len(v) > 0 {
		m.RemoveWebsiteIDs(v...)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.AddLocationIDs; len(v) > 0 {
		m.AddLocationIDs(v...)
	}
	if v := i.RemoveLocationIDs; len(v) > 0 {
		m.RemoveLocationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdate builder.
func (c *CountryUpdate) SetInput(i UpdateCountryInput) *CountryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCountryInput on the CountryUpdateOne builder.
func (c *CountryUpdateOne) SetInput(i UpdateCountryInput) *CountryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEmailInput represents a mutation input for creating emails.
type CreateEmailInput struct {
	Title       string
	Description string
	Address     string
	CompanyID   *uuid.UUID
	CountryID   *uuid.UUID
}

// Mutate applies the CreateEmailInput on the EmailMutation builder.
func (i *CreateEmailInput) Mutate(m *EmailMutation) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetAddress(i.Address)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the CreateEmailInput on the EmailCreate builder.
func (c *EmailCreate) SetInput(i CreateEmailInput) *EmailCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEmailInput represents a mutation input for updating emails.
type UpdateEmailInput struct {
	Title        *string
	Description  *string
	Address      *string
	ClearCompany bool
	CompanyID    *uuid.UUID
	ClearCountry bool
	CountryID    *uuid.UUID
}

// Mutate applies the UpdateEmailInput on the EmailMutation builder.
func (i *UpdateEmailInput) Mutate(m *EmailMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateEmailInput on the EmailUpdate builder.
func (c *EmailUpdate) SetInput(i UpdateEmailInput) *EmailUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEmailInput on the EmailUpdateOne builder.
func (c *EmailUpdateOne) SetInput(i UpdateEmailInput) *EmailUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateImageInput represents a mutation input for creating images.
type CreateImageInput struct {
	Title            string
	OriginalURL      string
	GalleryCompanyID *uuid.UUID
	LogoCompanyID    *uuid.UUID
	CoverCompanyID   *uuid.UUID
}

// Mutate applies the CreateImageInput on the ImageMutation builder.
func (i *CreateImageInput) Mutate(m *ImageMutation) {
	m.SetTitle(i.Title)
	m.SetOriginalURL(i.OriginalURL)
	if v := i.GalleryCompanyID; v != nil {
		m.SetGalleryCompanyID(*v)
	}
	if v := i.LogoCompanyID; v != nil {
		m.SetLogoCompanyID(*v)
	}
	if v := i.CoverCompanyID; v != nil {
		m.SetCoverCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateImageInput on the ImageCreate builder.
func (c *ImageCreate) SetInput(i CreateImageInput) *ImageCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateImageInput represents a mutation input for updating images.
type UpdateImageInput struct {
	Title               *string
	OriginalURL         *string
	ClearGalleryCompany bool
	GalleryCompanyID    *uuid.UUID
	ClearLogoCompany    bool
	LogoCompanyID       *uuid.UUID
	ClearCoverCompany   bool
	CoverCompanyID      *uuid.UUID
}

// Mutate applies the UpdateImageInput on the ImageMutation builder.
func (i *UpdateImageInput) Mutate(m *ImageMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.OriginalURL; v != nil {
		m.SetOriginalURL(*v)
	}
	if i.ClearGalleryCompany {
		m.ClearGalleryCompany()
	}
	if v := i.GalleryCompanyID; v != nil {
		m.SetGalleryCompanyID(*v)
	}
	if i.ClearLogoCompany {
		m.ClearLogoCompany()
	}
	if v := i.LogoCompanyID; v != nil {
		m.SetLogoCompanyID(*v)
	}
	if i.ClearCoverCompany {
		m.ClearCoverCompany()
	}
	if v := i.CoverCompanyID; v != nil {
		m.SetCoverCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateImageInput on the ImageUpdate builder.
func (c *ImageUpdate) SetInput(i UpdateImageInput) *ImageUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateImageInput on the ImageUpdateOne builder.
func (c *ImageUpdateOne) SetInput(i UpdateImageInput) *ImageUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	Title       string
	Description string
	Latitude    float64
	Longitude   float64
	Address     string
	Postcode    string
	Type        string
	State       string
	Suburb      string
	StreetType  string
	StreetName  string
	CompanyID   *uuid.UUID
	CountryID   *uuid.UUID
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetLatitude(i.Latitude)
	m.SetLongitude(i.Longitude)
	m.SetAddress(i.Address)
	m.SetPostcode(i.Postcode)
	m.SetType(i.Type)
	m.SetState(i.State)
	m.SetSuburb(i.Suburb)
	m.SetStreetType(i.StreetType)
	m.SetStreetName(i.StreetName)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	Title        *string
	Description  *string
	Latitude     *float64
	Longitude    *float64
	Address      *string
	Postcode     *string
	Type         *string
	State        *string
	Suburb       *string
	StreetType   *string
	StreetName   *string
	ClearCompany bool
	CompanyID    *uuid.UUID
	ClearCountry bool
	CountryID    *uuid.UUID
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Latitude; v != nil {
		m.SetLatitude(*v)
	}
	if v := i.Longitude; v != nil {
		m.SetLongitude(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Postcode; v != nil {
		m.SetPostcode(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.Suburb; v != nil {
		m.SetSuburb(*v)
	}
	if v := i.StreetType; v != nil {
		m.SetStreetType(*v)
	}
	if v := i.StreetName; v != nil {
		m.SetStreetName(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePhoneInput represents a mutation input for creating phones.
type CreatePhoneInput struct {
	Title       string
	Description string
	Number      string
	Type        string
	CompanyID   *uuid.UUID
	CountryID   *uuid.UUID
}

// Mutate applies the CreatePhoneInput on the PhoneMutation builder.
func (i *CreatePhoneInput) Mutate(m *PhoneMutation) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetNumber(i.Number)
	m.SetType(i.Type)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the CreatePhoneInput on the PhoneCreate builder.
func (c *PhoneCreate) SetInput(i CreatePhoneInput) *PhoneCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePhoneInput represents a mutation input for updating phones.
type UpdatePhoneInput struct {
	Title        *string
	Description  *string
	Number       *string
	Type         *string
	ClearCompany bool
	CompanyID    *uuid.UUID
	ClearCountry bool
	CountryID    *uuid.UUID
}

// Mutate applies the UpdatePhoneInput on the PhoneMutation builder.
func (i *UpdatePhoneInput) Mutate(m *PhoneMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Number; v != nil {
		m.SetNumber(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdatePhoneInput on the PhoneUpdate builder.
func (c *PhoneUpdate) SetInput(i UpdatePhoneInput) *PhoneUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePhoneInput on the PhoneUpdateOne builder.
func (c *PhoneUpdateOne) SetInput(i UpdatePhoneInput) *PhoneUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	Name        string
	Description string
	Image       string
	URL         string
	Status      *enums.ProcessStatus
	BuildStatus *enums.ProcessStatus
	WarehouseID *uuid.UUID
	VendorID    *uuid.UUID
}

// Mutate applies the CreateProductInput on the ProductMutation builder.
func (i *CreateProductInput) Mutate(m *ProductMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetImage(i.Image)
	m.SetURL(i.URL)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.BuildStatus; v != nil {
		m.SetBuildStatus(*v)
	}
	if v := i.WarehouseID; v != nil {
		m.SetWarehouseID(*v)
	}
	if v := i.VendorID; v != nil {
		m.SetVendorID(*v)
	}
}

// SetInput applies the change-set in the CreateProductInput on the ProductCreate builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	Name           *string
	Description    *string
	Image          *string
	URL            *string
	ClearLastSell  bool
	LastSell       *time.Time
	ClearCreatedAt bool
	CreatedAt      *time.Time
	Status         *enums.ProcessStatus
	BuildStatus    *enums.ProcessStatus
	ClearWarehouse bool
	WarehouseID    *uuid.UUID
	ClearVendor    bool
	VendorID       *uuid.UUID
}

// Mutate applies the UpdateProductInput on the ProductMutation builder.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if i.ClearLastSell {
		m.ClearLastSell()
	}
	if v := i.LastSell; v != nil {
		m.SetLastSell(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.BuildStatus; v != nil {
		m.SetBuildStatus(*v)
	}
	if i.ClearWarehouse {
		m.ClearWarehouse()
	}
	if v := i.WarehouseID; v != nil {
		m.SetWarehouseID(*v)
	}
	if i.ClearVendor {
		m.ClearVendor()
	}
	if v := i.VendorID; v != nil {
		m.SetVendorID(*v)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdate builder.
func (c *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdateOne builder.
func (c *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateVendorInput represents a mutation input for creating vendors.
type CreateVendorInput struct {
	Name         string
	Schema       string
	WarehouseIDs []uuid.UUID
	ProductIDs   []uuid.UUID
}

// Mutate applies the CreateVendorInput on the VendorMutation builder.
func (i *CreateVendorInput) Mutate(m *VendorMutation) {
	m.SetName(i.Name)
	m.SetSchema(i.Schema)
	if v := i.WarehouseIDs; len(v) > 0 {
		m.AddWarehouseIDs(v...)
	}
	if v := i.ProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
}

// SetInput applies the change-set in the CreateVendorInput on the VendorCreate builder.
func (c *VendorCreate) SetInput(i CreateVendorInput) *VendorCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVendorInput represents a mutation input for updating vendors.
type UpdateVendorInput struct {
	Name               *string
	Schema             *string
	ClearWarehouses    bool
	AddWarehouseIDs    []uuid.UUID
	RemoveWarehouseIDs []uuid.UUID
	ClearProducts      bool
	AddProductIDs      []uuid.UUID
	RemoveProductIDs   []uuid.UUID
}

// Mutate applies the UpdateVendorInput on the VendorMutation builder.
func (i *UpdateVendorInput) Mutate(m *VendorMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Schema; v != nil {
		m.SetSchema(*v)
	}
	if i.ClearWarehouses {
		m.ClearWarehouses()
	}
	if v := i.AddWarehouseIDs; len(v) > 0 {
		m.AddWarehouseIDs(v...)
	}
	if v := i.RemoveWarehouseIDs; len(v) > 0 {
		m.RemoveWarehouseIDs(v...)
	}
	if i.ClearProducts {
		m.ClearProducts()
	}
	if v := i.AddProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.RemoveProductIDs; len(v) > 0 {
		m.RemoveProductIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateVendorInput on the VendorUpdate builder.
func (c *VendorUpdate) SetInput(i UpdateVendorInput) *VendorUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVendorInput on the VendorUpdateOne builder.
func (c *VendorUpdateOne) SetInput(i UpdateVendorInput) *VendorUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWarehouseInput represents a mutation input for creating warehouses.
type CreateWarehouseInput struct {
	Name         string
	OriginalData *string
	Enabled      *bool
	Filters      []string
	ProductIDs   []uuid.UUID
	VendorID     *uuid.UUID
}

// Mutate applies the CreateWarehouseInput on the WarehouseMutation builder.
func (i *CreateWarehouseInput) Mutate(m *WarehouseMutation) {
	m.SetName(i.Name)
	if v := i.OriginalData; v != nil {
		m.SetOriginalData(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.Filters; v != nil {
		m.SetFilters(v)
	}
	if v := i.ProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.VendorID; v != nil {
		m.SetVendorID(*v)
	}
}

// SetInput applies the change-set in the CreateWarehouseInput on the WarehouseCreate builder.
func (c *WarehouseCreate) SetInput(i CreateWarehouseInput) *WarehouseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWarehouseInput represents a mutation input for updating warehouses.
type UpdateWarehouseInput struct {
	Name              *string
	ClearLastUpdate   bool
	LastUpdate        *time.Time
	ClearOriginalData bool
	OriginalData      *string
	Enabled           *bool
	ClearFilters      bool
	Filters           []string
	AppendFilters     []string
	ClearProducts     bool
	AddProductIDs     []uuid.UUID
	RemoveProductIDs  []uuid.UUID
	ClearVendor       bool
	VendorID          *uuid.UUID
}

// Mutate applies the UpdateWarehouseInput on the WarehouseMutation builder.
func (i *UpdateWarehouseInput) Mutate(m *WarehouseMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearLastUpdate {
		m.ClearLastUpdate()
	}
	if v := i.LastUpdate; v != nil {
		m.SetLastUpdate(*v)
	}
	if i.ClearOriginalData {
		m.ClearOriginalData()
	}
	if v := i.OriginalData; v != nil {
		m.SetOriginalData(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if i.ClearFilters {
		m.ClearFilters()
	}
	if v := i.Filters; v != nil {
		m.SetFilters(v)
	}
	if i.AppendFilters != nil {
		m.AppendFilters(i.Filters)
	}
	if i.ClearProducts {
		m.ClearProducts()
	}
	if v := i.AddProductIDs; len(v) > 0 {
		m.AddProductIDs(v...)
	}
	if v := i.RemoveProductIDs; len(v) > 0 {
		m.RemoveProductIDs(v...)
	}
	if i.ClearVendor {
		m.ClearVendor()
	}
	if v := i.VendorID; v != nil {
		m.SetVendorID(*v)
	}
}

// SetInput applies the change-set in the UpdateWarehouseInput on the WarehouseUpdate builder.
func (c *WarehouseUpdate) SetInput(i UpdateWarehouseInput) *WarehouseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWarehouseInput on the WarehouseUpdateOne builder.
func (c *WarehouseUpdateOne) SetInput(i UpdateWarehouseInput) *WarehouseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWebsiteInput represents a mutation input for creating websites.
type CreateWebsiteInput struct {
	Title       string
	Description string
	URL         string
	CompanyID   *uuid.UUID
	CountryID   *uuid.UUID
}

// Mutate applies the CreateWebsiteInput on the WebsiteMutation builder.
func (i *CreateWebsiteInput) Mutate(m *WebsiteMutation) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetURL(i.URL)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the CreateWebsiteInput on the WebsiteCreate builder.
func (c *WebsiteCreate) SetInput(i CreateWebsiteInput) *WebsiteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWebsiteInput represents a mutation input for updating websites.
type UpdateWebsiteInput struct {
	Title        *string
	Description  *string
	URL          *string
	ClearCompany bool
	CompanyID    *uuid.UUID
	ClearCountry bool
	CountryID    *uuid.UUID
}

// Mutate applies the UpdateWebsiteInput on the WebsiteMutation builder.
func (i *UpdateWebsiteInput) Mutate(m *WebsiteMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
}

// SetInput applies the change-set in the UpdateWebsiteInput on the WebsiteUpdate builder.
func (c *WebsiteUpdate) SetInput(i UpdateWebsiteInput) *WebsiteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWebsiteInput on the WebsiteUpdateOne builder.
func (c *WebsiteUpdateOne) SetInput(i UpdateWebsiteInput) *WebsiteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
