// Autogenerated by entkit
//
// Code generated by entc, DO NOT EDIT.

package product

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/entkit/entkit-demo/ent/schema/enums"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldLastSell holds the string denoting the last_sell field in the database.
	FieldLastSell = "last_sell"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBuildStatus holds the string denoting the build_status field in the database.
	FieldBuildStatus = "build_status"
	// EdgeWarehouse holds the string denoting the warehouse edge name in mutations.
	EdgeWarehouse = "warehouse"
	// EdgeVendor holds the string denoting the vendor edge name in mutations.
	EdgeVendor = "vendor"
	// Table holds the table name of the product in the database.
	Table = "products"
	// WarehouseTable is the table that holds the warehouse relation/edge.
	WarehouseTable = "products"
	// WarehouseInverseTable is the table name for the Warehouse entity.
	// It exists in this package in order to avoid circular dependency with the "warehouse" package.
	WarehouseInverseTable = "warehouses"
	// WarehouseColumn is the table column denoting the warehouse relation/edge.
	WarehouseColumn = "warehouse_products"
	// VendorTable is the table that holds the vendor relation/edge.
	VendorTable = "products"
	// VendorInverseTable is the table name for the Vendor entity.
	// It exists in this package in order to avoid circular dependency with the "vendor" package.
	VendorInverseTable = "vendors"
	// VendorColumn is the table column denoting the vendor relation/edge.
	VendorColumn = "vendor_products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldImage,
	FieldURL,
	FieldLastSell,
	FieldCreatedAt,
	FieldStatus,
	FieldBuildStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vendor_products",
	"warehouse_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultStatus enums.ProcessStatus = "none"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.ProcessStatus) error {
	switch s {
	case "none", "done", "enqueued", "in_progress", "failed":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for status field: %q", s)
	}
}

const DefaultBuildStatus enums.ProcessStatus = "none"

// BuildStatusValidator is a validator for the "build_status" field enum values. It is called by the builders before save.
func BuildStatusValidator(bs enums.ProcessStatus) error {
	switch bs {
	case "none", "done", "enqueued", "in_progress", "failed":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for build_status field: %q", bs)
	}
}

// Order defines the ordering method for the Product queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByLastSell orders the results by the last_sell field.
func ByLastSell(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLastSell, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByBuildStatus orders the results by the build_status field.
func ByBuildStatus(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldBuildStatus, opts...).ToFunc()
}

// ByWarehouseField orders the results by warehouse field.
func ByWarehouseField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWarehouseStep(), sql.OrderByField(field, opts...))
	}
}

// ByVendorField orders the results by vendor field.
func ByVendorField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorStep(), sql.OrderByField(field, opts...))
	}
}
func newWarehouseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WarehouseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WarehouseTable, WarehouseColumn),
	)
}
func newVendorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
	)
}

var (
	// enums.ProcessStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ProcessStatus)(nil)
	// enums.ProcessStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ProcessStatus)(nil)
)

var (
	// enums.ProcessStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ProcessStatus)(nil)
	// enums.ProcessStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ProcessStatus)(nil)
)
